{"ast":null,"code":"'use strict';\n\nconst argsert = require('./lib/argsert');\n\nconst fs = require('fs');\n\nconst Command = require('./lib/command');\n\nconst Completion = require('./lib/completion');\n\nconst Parser = require('yargs-parser');\n\nconst path = require('path');\n\nconst Usage = require('./lib/usage');\n\nconst Validation = require('./lib/validation');\n\nconst Y18n = require('y18n');\n\nconst objFilter = require('./lib/obj-filter');\n\nconst setBlocking = require('set-blocking');\n\nconst applyExtends = require('./lib/apply-extends');\n\nconst {\n  globalMiddlewareFactory\n} = require('./lib/middleware');\n\nconst YError = require('./lib/yerror');\n\nexports = module.exports = Yargs;\n\nfunction Yargs(processArgs, cwd, parentRequire) {\n  processArgs = processArgs || []; // handle calling yargs().\n\n  const self = {};\n  let command = null;\n  let completion = null;\n  let groups = {};\n  let globalMiddleware = [];\n  let output = '';\n  let preservedGroups = {};\n  let usage = null;\n  let validation = null;\n  const y18n = Y18n({\n    directory: path.resolve(__dirname, './locales'),\n    updateFiles: false\n  });\n  self.middleware = globalMiddlewareFactory(globalMiddleware, self);\n  if (!cwd) cwd = process.cwd();\n\n  self.scriptName = function (scriptName) {\n    self.customScriptName = true;\n    self.$0 = scriptName;\n    return self;\n  }; // ignore the node bin, specify this in your\n  // bin file with #!/usr/bin/env node\n\n\n  if (/\\b(node|iojs|electron)(\\.exe)?$/.test(process.argv[0])) {\n    self.$0 = process.argv.slice(1, 2);\n  } else {\n    self.$0 = process.argv.slice(0, 1);\n  }\n\n  self.$0 = self.$0.map((x, i) => {\n    const b = rebase(cwd, x);\n    return x.match(/^(\\/|([a-zA-Z]:)?\\\\)/) && b.length < x.length ? b : x;\n  }).join(' ').trim();\n\n  if (process.env._ !== undefined && process.argv[1] === process.env._) {\n    self.$0 = process.env._.replace(`${path.dirname(process.execPath)}/`, '');\n  } // use context object to keep track of resets, subcommand execution, etc\n  // submodules should modify and check the state of context as necessary\n\n\n  const context = {\n    resets: -1,\n    commands: [],\n    fullCommands: [],\n    files: []\n  };\n\n  self.getContext = () => context; // puts yargs back into an initial state. any keys\n  // that have been set to \"global\" will not be reset\n  // by this action.\n\n\n  let options;\n\n  self.resetOptions = self.reset = function resetOptions(aliases) {\n    context.resets++;\n    aliases = aliases || {};\n    options = options || {}; // put yargs back into an initial state, this\n    // logic is used to build a nested command\n    // hierarchy.\n\n    const tmpOptions = {};\n    tmpOptions.local = options.local ? options.local : [];\n    tmpOptions.configObjects = options.configObjects ? options.configObjects : []; // if a key has been explicitly set as local,\n    // we should reset it before passing options to command.\n\n    const localLookup = {};\n    tmpOptions.local.forEach(l => {\n      localLookup[l] = true;\n      (aliases[l] || []).forEach(a => {\n        localLookup[a] = true;\n      });\n    }); // add all groups not set to local to preserved groups\n\n    Object.assign(preservedGroups, Object.keys(groups).reduce((acc, groupName) => {\n      const keys = groups[groupName].filter(key => !(key in localLookup));\n\n      if (keys.length > 0) {\n        acc[groupName] = keys;\n      }\n\n      return acc;\n    }, {})); // groups can now be reset\n\n    groups = {};\n    const arrayOptions = ['array', 'boolean', 'string', 'skipValidation', 'count', 'normalize', 'number', 'hiddenOptions'];\n    const objectOptions = ['narg', 'key', 'alias', 'default', 'defaultDescription', 'config', 'choices', 'demandedOptions', 'demandedCommands', 'coerce'];\n    arrayOptions.forEach(k => {\n      tmpOptions[k] = (options[k] || []).filter(k => !localLookup[k]);\n    });\n    objectOptions.forEach(k => {\n      tmpOptions[k] = objFilter(options[k], (k, v) => !localLookup[k]);\n    });\n    tmpOptions.envPrefix = options.envPrefix;\n    options = tmpOptions; // if this is the first time being executed, create\n    // instances of all our helpers -- otherwise just reset.\n\n    usage = usage ? usage.reset(localLookup) : Usage(self, y18n);\n    validation = validation ? validation.reset(localLookup) : Validation(self, usage, y18n);\n    command = command ? command.reset() : Command(self, usage, validation, globalMiddleware);\n    if (!completion) completion = Completion(self, usage, command);\n    completionCommand = null;\n    output = '';\n    exitError = null;\n    hasOutput = false;\n    self.parsed = false;\n    return self;\n  };\n\n  self.resetOptions(); // temporary hack: allow \"freezing\" of reset-able state for parse(msg, cb)\n\n  let frozens = [];\n\n  function freeze() {\n    let frozen = {};\n    frozens.push(frozen);\n    frozen.options = options;\n    frozen.configObjects = options.configObjects.slice(0);\n    frozen.exitProcess = exitProcess;\n    frozen.groups = groups;\n    usage.freeze();\n    validation.freeze();\n    command.freeze();\n    frozen.strict = strict;\n    frozen.completionCommand = completionCommand;\n    frozen.output = output;\n    frozen.exitError = exitError;\n    frozen.hasOutput = hasOutput;\n    frozen.parsed = self.parsed;\n    frozen.parseFn = parseFn;\n    frozen.parseContext = parseContext;\n  }\n\n  function unfreeze() {\n    let frozen = frozens.pop();\n    options = frozen.options;\n    options.configObjects = frozen.configObjects;\n    exitProcess = frozen.exitProcess;\n    groups = frozen.groups;\n    output = frozen.output;\n    exitError = frozen.exitError;\n    hasOutput = frozen.hasOutput;\n    self.parsed = frozen.parsed;\n    usage.unfreeze();\n    validation.unfreeze();\n    command.unfreeze();\n    strict = frozen.strict;\n    completionCommand = frozen.completionCommand;\n    parseFn = frozen.parseFn;\n    parseContext = frozen.parseContext;\n  }\n\n  self.boolean = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('boolean', keys);\n    return self;\n  };\n\n  self.array = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('array', keys);\n    return self;\n  };\n\n  self.number = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('number', keys);\n    return self;\n  };\n\n  self.normalize = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('normalize', keys);\n    return self;\n  };\n\n  self.count = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('count', keys);\n    return self;\n  };\n\n  self.string = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('string', keys);\n    return self;\n  };\n\n  self.requiresArg = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintObject(self.nargs, false, 'narg', keys, 1);\n    return self;\n  };\n\n  self.skipValidation = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('skipValidation', keys);\n    return self;\n  };\n\n  function populateParserHintArray(type, keys, value) {\n    keys = [].concat(keys);\n    keys.forEach(key => {\n      key = sanitizeKey(key);\n      options[type].push(key);\n    });\n  }\n\n  self.nargs = function (key, value) {\n    argsert('<string|object|array> [number]', [key, value], arguments.length);\n    populateParserHintObject(self.nargs, false, 'narg', key, value);\n    return self;\n  };\n\n  self.choices = function (key, value) {\n    argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n    populateParserHintObject(self.choices, true, 'choices', key, value);\n    return self;\n  };\n\n  self.alias = function (key, value) {\n    argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n    populateParserHintObject(self.alias, true, 'alias', key, value);\n    return self;\n  }; // TODO: actually deprecate self.defaults.\n\n\n  self.default = self.defaults = function (key, value, defaultDescription) {\n    argsert('<object|string|array> [*] [string]', [key, value, defaultDescription], arguments.length);\n    if (defaultDescription) options.defaultDescription[key] = defaultDescription;\n\n    if (typeof value === 'function') {\n      if (!options.defaultDescription[key]) options.defaultDescription[key] = usage.functionDescription(value);\n      value = value.call();\n    }\n\n    populateParserHintObject(self.default, false, 'default', key, value);\n    return self;\n  };\n\n  self.describe = function (key, desc) {\n    argsert('<object|string|array> [string]', [key, desc], arguments.length);\n    populateParserHintObject(self.describe, false, 'key', key, true);\n    usage.describe(key, desc);\n    return self;\n  };\n\n  self.demandOption = function (keys, msg) {\n    argsert('<object|string|array> [string]', [keys, msg], arguments.length);\n    populateParserHintObject(self.demandOption, false, 'demandedOptions', keys, msg);\n    return self;\n  };\n\n  self.coerce = function (keys, value) {\n    argsert('<object|string|array> [function]', [keys, value], arguments.length);\n    populateParserHintObject(self.coerce, false, 'coerce', keys, value);\n    return self;\n  };\n\n  function populateParserHintObject(builder, isArray, type, key, value) {\n    if (Array.isArray(key)) {\n      const temp = Object.create(null); // an array of keys with one value ['x', 'y', 'z'], function parse () {}\n\n      key.forEach(k => {\n        temp[k] = value;\n      });\n      builder(temp);\n    } else if (typeof key === 'object') {\n      // an object of key value pairs: {'x': parse () {}, 'y': parse() {}}\n      Object.keys(key).forEach(k => {\n        builder(k, key[k]);\n      });\n    } else {\n      key = sanitizeKey(key); // a single key value pair 'x', parse() {}\n\n      if (isArray) {\n        options[type][key] = (options[type][key] || []).concat(value);\n      } else {\n        options[type][key] = value;\n      }\n    }\n  } // TODO(bcoe): in future major versions move more objects towards\n  // Object.create(null):\n\n\n  function sanitizeKey(key) {\n    if (key === '__proto__') return '___proto___';\n    return key;\n  }\n\n  function deleteFromParserHintObject(optionKey) {\n    // delete from all parsing hints:\n    // boolean, array, key, alias, etc.\n    Object.keys(options).forEach(hintKey => {\n      const hint = options[hintKey];\n\n      if (Array.isArray(hint)) {\n        if (~hint.indexOf(optionKey)) hint.splice(hint.indexOf(optionKey), 1);\n      } else if (typeof hint === 'object') {\n        delete hint[optionKey];\n      }\n    }); // now delete the description from usage.js.\n\n    delete usage.getDescriptions()[optionKey];\n  }\n\n  self.config = function config(key, msg, parseFn) {\n    argsert('[object|string] [string|function] [function]', [key, msg, parseFn], arguments.length); // allow a config object to be provided directly.\n\n    if (typeof key === 'object') {\n      key = applyExtends(key, cwd, self.getParserConfiguration()['deep-merge-config']);\n      options.configObjects = (options.configObjects || []).concat(key);\n      return self;\n    } // allow for a custom parsing function.\n\n\n    if (typeof msg === 'function') {\n      parseFn = msg;\n      msg = null;\n    }\n\n    key = key || 'config';\n    self.describe(key, msg || usage.deferY18nLookup('Path to JSON config file'));\n    (Array.isArray(key) ? key : [key]).forEach(k => {\n      options.config[k] = parseFn || true;\n    });\n    return self;\n  };\n\n  self.example = function (cmd, description) {\n    argsert('<string> [string]', [cmd, description], arguments.length);\n    usage.example(cmd, description);\n    return self;\n  };\n\n  self.command = function (cmd, description, builder, handler, middlewares) {\n    argsert('<string|array|object> [string|boolean] [function|object] [function] [array]', [cmd, description, builder, handler, middlewares], arguments.length);\n    command.addHandler(cmd, description, builder, handler, middlewares);\n    return self;\n  };\n\n  self.commandDir = function (dir, opts) {\n    argsert('<string> [object]', [dir, opts], arguments.length);\n    const req = parentRequire || require;\n    command.addDirectory(dir, self.getContext(), req, require('get-caller-file')(), opts);\n    return self;\n  }; // TODO: deprecate self.demand in favor of\n  // .demandCommand() .demandOption().\n\n\n  self.demand = self.required = self.require = function demand(keys, max, msg) {\n    // you can optionally provide a 'max' key,\n    // which will raise an exception if too many '_'\n    // options are provided.\n    if (Array.isArray(max)) {\n      max.forEach(key => {\n        self.demandOption(key, msg);\n      });\n      max = Infinity;\n    } else if (typeof max !== 'number') {\n      msg = max;\n      max = Infinity;\n    }\n\n    if (typeof keys === 'number') {\n      self.demandCommand(keys, max, msg, msg);\n    } else if (Array.isArray(keys)) {\n      keys.forEach(key => {\n        self.demandOption(key, msg);\n      });\n    } else {\n      if (typeof msg === 'string') {\n        self.demandOption(keys, msg);\n      } else if (msg === true || typeof msg === 'undefined') {\n        self.demandOption(keys);\n      }\n    }\n\n    return self;\n  };\n\n  self.demandCommand = function demandCommand(min, max, minMsg, maxMsg) {\n    argsert('[number] [number|string] [string|null|undefined] [string|null|undefined]', [min, max, minMsg, maxMsg], arguments.length);\n    if (typeof min === 'undefined') min = 1;\n\n    if (typeof max !== 'number') {\n      minMsg = max;\n      max = Infinity;\n    }\n\n    self.global('_', false);\n    options.demandedCommands._ = {\n      min,\n      max,\n      minMsg,\n      maxMsg\n    };\n    return self;\n  };\n\n  self.getDemandedOptions = () => {\n    argsert([], 0);\n    return options.demandedOptions;\n  };\n\n  self.getDemandedCommands = () => {\n    argsert([], 0);\n    return options.demandedCommands;\n  };\n\n  self.implies = function (key, value) {\n    argsert('<string|object> [number|string|array]', [key, value], arguments.length);\n    validation.implies(key, value);\n    return self;\n  };\n\n  self.conflicts = function (key1, key2) {\n    argsert('<string|object> [string|array]', [key1, key2], arguments.length);\n    validation.conflicts(key1, key2);\n    return self;\n  };\n\n  self.usage = function (msg, description, builder, handler) {\n    argsert('<string|null|undefined> [string|boolean] [function|object] [function]', [msg, description, builder, handler], arguments.length);\n\n    if (description !== undefined) {\n      // .usage() can be used as an alias for defining\n      // a default command.\n      if ((msg || '').match(/^\\$0( |$)/)) {\n        return self.command(msg, description, builder, handler);\n      } else {\n        throw new YError('.usage() description must start with $0 if being used as alias for .command()');\n      }\n    } else {\n      usage.usage(msg);\n      return self;\n    }\n  };\n\n  self.epilogue = self.epilog = function (msg) {\n    argsert('<string>', [msg], arguments.length);\n    usage.epilog(msg);\n    return self;\n  };\n\n  self.fail = function (f) {\n    argsert('<function>', [f], arguments.length);\n    usage.failFn(f);\n    return self;\n  };\n\n  self.check = function (f, _global) {\n    argsert('<function> [boolean]', [f, _global], arguments.length);\n    validation.check(f, _global !== false);\n    return self;\n  };\n\n  self.global = function global(globals, global) {\n    argsert('<string|array> [boolean]', [globals, global], arguments.length);\n    globals = [].concat(globals);\n\n    if (global !== false) {\n      options.local = options.local.filter(l => globals.indexOf(l) === -1);\n    } else {\n      globals.forEach(g => {\n        if (options.local.indexOf(g) === -1) options.local.push(g);\n      });\n    }\n\n    return self;\n  };\n\n  self.pkgConf = function pkgConf(key, rootPath) {\n    argsert('<string> [string]', [key, rootPath], arguments.length);\n    let conf = null; // prefer cwd to require-main-filename in this method\n    // since we're looking for e.g. \"nyc\" config in nyc consumer\n    // rather than \"yargs\" config in nyc (where nyc is the main filename)\n\n    const obj = pkgUp(rootPath || cwd); // If an object exists in the key, add it to options.configObjects\n\n    if (obj[key] && typeof obj[key] === 'object') {\n      conf = applyExtends(obj[key], rootPath || cwd, self.getParserConfiguration()['deep-merge-config']);\n      options.configObjects = (options.configObjects || []).concat(conf);\n    }\n\n    return self;\n  };\n\n  const pkgs = {};\n\n  function pkgUp(rootPath) {\n    const npath = rootPath || '*';\n    if (pkgs[npath]) return pkgs[npath];\n\n    const findUp = require('find-up');\n\n    let obj = {};\n\n    try {\n      let startDir = rootPath || require('require-main-filename')(parentRequire || require); // When called in an environment that lacks require.main.filename, such as a jest test runner,\n      // startDir is already process.cwd(), and should not be shortened.\n      // Whether or not it is _actually_ a directory (e.g., extensionless bin) is irrelevant, find-up handles it.\n\n\n      if (!rootPath && path.extname(startDir)) {\n        startDir = path.dirname(startDir);\n      }\n\n      const pkgJsonPath = findUp.sync('package.json', {\n        cwd: startDir\n      });\n      obj = JSON.parse(fs.readFileSync(pkgJsonPath));\n    } catch (noop) {}\n\n    pkgs[npath] = obj || {};\n    return pkgs[npath];\n  }\n\n  let parseFn = null;\n  let parseContext = null;\n\n  self.parse = function parse(args, shortCircuit, _parseFn) {\n    argsert('[string|array] [function|boolean|object] [function]', [args, shortCircuit, _parseFn], arguments.length);\n    freeze();\n\n    if (typeof args === 'undefined') {\n      const argv = self._parseArgs(processArgs);\n\n      const tmpParsed = self.parsed;\n      unfreeze(); // TODO: remove this compatibility hack when we release yargs@15.x:\n\n      self.parsed = tmpParsed;\n      return argv;\n    } // a context object can optionally be provided, this allows\n    // additional information to be passed to a command handler.\n\n\n    if (typeof shortCircuit === 'object') {\n      parseContext = shortCircuit;\n      shortCircuit = _parseFn;\n    } // by providing a function as a second argument to\n    // parse you can capture output that would otherwise\n    // default to printing to stdout/stderr.\n\n\n    if (typeof shortCircuit === 'function') {\n      parseFn = shortCircuit;\n      shortCircuit = null;\n    } // completion short-circuits the parsing process,\n    // skipping validation, etc.\n\n\n    if (!shortCircuit) processArgs = args;\n    if (parseFn) exitProcess = false;\n\n    const parsed = self._parseArgs(args, shortCircuit);\n\n    if (parseFn) parseFn(exitError, parsed, output);\n    unfreeze();\n    return parsed;\n  };\n\n  self._getParseContext = () => parseContext || {};\n\n  self._hasParseCallback = () => !!parseFn;\n\n  self.option = self.options = function option(key, opt) {\n    argsert('<string|object> [object]', [key, opt], arguments.length);\n\n    if (typeof key === 'object') {\n      Object.keys(key).forEach(k => {\n        self.options(k, key[k]);\n      });\n    } else {\n      if (typeof opt !== 'object') {\n        opt = {};\n      }\n\n      options.key[key] = true; // track manually set keys.\n\n      if (opt.alias) self.alias(key, opt.alias);\n      const demand = opt.demand || opt.required || opt.require; // deprecated, use 'demandOption' instead\n\n      if (demand) {\n        self.demand(key, demand);\n      }\n\n      if (opt.demandOption) {\n        self.demandOption(key, typeof opt.demandOption === 'string' ? opt.demandOption : undefined);\n      }\n\n      if ('conflicts' in opt) {\n        self.conflicts(key, opt.conflicts);\n      }\n\n      if ('default' in opt) {\n        self.default(key, opt.default);\n      }\n\n      if ('implies' in opt) {\n        self.implies(key, opt.implies);\n      }\n\n      if ('nargs' in opt) {\n        self.nargs(key, opt.nargs);\n      }\n\n      if (opt.config) {\n        self.config(key, opt.configParser);\n      }\n\n      if (opt.normalize) {\n        self.normalize(key);\n      }\n\n      if ('choices' in opt) {\n        self.choices(key, opt.choices);\n      }\n\n      if ('coerce' in opt) {\n        self.coerce(key, opt.coerce);\n      }\n\n      if ('group' in opt) {\n        self.group(key, opt.group);\n      }\n\n      if (opt.boolean || opt.type === 'boolean') {\n        self.boolean(key);\n        if (opt.alias) self.boolean(opt.alias);\n      }\n\n      if (opt.array || opt.type === 'array') {\n        self.array(key);\n        if (opt.alias) self.array(opt.alias);\n      }\n\n      if (opt.number || opt.type === 'number') {\n        self.number(key);\n        if (opt.alias) self.number(opt.alias);\n      }\n\n      if (opt.string || opt.type === 'string') {\n        self.string(key);\n        if (opt.alias) self.string(opt.alias);\n      }\n\n      if (opt.count || opt.type === 'count') {\n        self.count(key);\n      }\n\n      if (typeof opt.global === 'boolean') {\n        self.global(key, opt.global);\n      }\n\n      if (opt.defaultDescription) {\n        options.defaultDescription[key] = opt.defaultDescription;\n      }\n\n      if (opt.skipValidation) {\n        self.skipValidation(key);\n      }\n\n      const desc = opt.describe || opt.description || opt.desc;\n      self.describe(key, desc);\n\n      if (opt.hidden) {\n        self.hide(key);\n      }\n\n      if (opt.requiresArg) {\n        self.requiresArg(key);\n      }\n    }\n\n    return self;\n  };\n\n  self.getOptions = () => options;\n\n  self.positional = function (key, opts) {\n    argsert('<string> <object>', [key, opts], arguments.length);\n\n    if (context.resets === 0) {\n      throw new YError(\".positional() can only be called in a command's builder function\");\n    } // .positional() only supports a subset of the configuration\n    // options available to .option().\n\n\n    const supportedOpts = ['default', 'defaultDescription', 'implies', 'normalize', 'choices', 'conflicts', 'coerce', 'type', 'describe', 'desc', 'description', 'alias'];\n    opts = objFilter(opts, (k, v) => {\n      let accept = supportedOpts.indexOf(k) !== -1; // type can be one of string|number|boolean.\n\n      if (k === 'type' && ['string', 'number', 'boolean'].indexOf(v) === -1) accept = false;\n      return accept;\n    }); // copy over any settings that can be inferred from the command string.\n\n    const fullCommand = context.fullCommands[context.fullCommands.length - 1];\n    const parseOptions = fullCommand ? command.cmdToParseOptions(fullCommand) : {\n      array: [],\n      alias: {},\n      default: {},\n      demand: {}\n    };\n    Object.keys(parseOptions).forEach(pk => {\n      if (Array.isArray(parseOptions[pk])) {\n        if (parseOptions[pk].indexOf(key) !== -1) opts[pk] = true;\n      } else {\n        if (parseOptions[pk][key] && !(pk in opts)) opts[pk] = parseOptions[pk][key];\n      }\n    });\n    self.group(key, usage.getPositionalGroupName());\n    return self.option(key, opts);\n  };\n\n  self.group = function group(opts, groupName) {\n    argsert('<string|array> <string>', [opts, groupName], arguments.length);\n    const existing = preservedGroups[groupName] || groups[groupName];\n\n    if (preservedGroups[groupName]) {\n      // we now only need to track this group name in groups.\n      delete preservedGroups[groupName];\n    }\n\n    const seen = {};\n    groups[groupName] = (existing || []).concat(opts).filter(key => {\n      if (seen[key]) return false;\n      return seen[key] = true;\n    });\n    return self;\n  }; // combine explicit and preserved groups. explicit groups should be first\n\n\n  self.getGroups = () => Object.assign({}, groups, preservedGroups); // as long as options.envPrefix is not undefined,\n  // parser will apply env vars matching prefix to argv\n\n\n  self.env = function (prefix) {\n    argsert('[string|boolean]', [prefix], arguments.length);\n    if (prefix === false) options.envPrefix = undefined;else options.envPrefix = prefix || '';\n    return self;\n  };\n\n  self.wrap = function (cols) {\n    argsert('<number|null|undefined>', [cols], arguments.length);\n    usage.wrap(cols);\n    return self;\n  };\n\n  let strict = false;\n\n  self.strict = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length);\n    strict = enabled !== false;\n    return self;\n  };\n\n  self.getStrict = () => strict;\n\n  let parserConfig = {};\n\n  self.parserConfiguration = function parserConfiguration(config) {\n    argsert('<object>', [config], arguments.length);\n    parserConfig = config;\n    return self;\n  };\n\n  self.getParserConfiguration = () => parserConfig;\n\n  self.showHelp = function (level) {\n    argsert('[string|function]', [level], arguments.length);\n    if (!self.parsed) self._parseArgs(processArgs); // run parser, if it has not already been executed.\n\n    if (command.hasDefaultCommand()) {\n      context.resets++; // override the restriction on top-level positoinals.\n\n      command.runDefaultBuilderOn(self, true);\n    }\n\n    usage.showHelp(level);\n    return self;\n  };\n\n  let versionOpt = null;\n\n  self.version = function version(opt, msg, ver) {\n    const defaultVersionOpt = 'version';\n    argsert('[boolean|string] [string] [string]', [opt, msg, ver], arguments.length); // nuke the key previously configured\n    // to return version #.\n\n    if (versionOpt) {\n      deleteFromParserHintObject(versionOpt);\n      usage.version(undefined);\n      versionOpt = null;\n    }\n\n    if (arguments.length === 0) {\n      ver = guessVersion();\n      opt = defaultVersionOpt;\n    } else if (arguments.length === 1) {\n      if (opt === false) {\n        // disable default 'version' key.\n        return self;\n      }\n\n      ver = opt;\n      opt = defaultVersionOpt;\n    } else if (arguments.length === 2) {\n      ver = msg;\n      msg = null;\n    }\n\n    versionOpt = typeof opt === 'string' ? opt : defaultVersionOpt;\n    msg = msg || usage.deferY18nLookup('Show version number');\n    usage.version(ver || undefined);\n    self.boolean(versionOpt);\n    self.describe(versionOpt, msg);\n    return self;\n  };\n\n  function guessVersion() {\n    const obj = pkgUp();\n    return obj.version || 'unknown';\n  }\n\n  let helpOpt = null;\n\n  self.addHelpOpt = self.help = function addHelpOpt(opt, msg) {\n    const defaultHelpOpt = 'help';\n    argsert('[string|boolean] [string]', [opt, msg], arguments.length); // nuke the key previously configured\n    // to return help.\n\n    if (helpOpt) {\n      deleteFromParserHintObject(helpOpt);\n      helpOpt = null;\n    }\n\n    if (arguments.length === 1) {\n      if (opt === false) return self;\n    } // use arguments, fallback to defaults for opt and msg\n\n\n    helpOpt = typeof opt === 'string' ? opt : defaultHelpOpt;\n    self.boolean(helpOpt);\n    self.describe(helpOpt, msg || usage.deferY18nLookup('Show help'));\n    return self;\n  };\n\n  const defaultShowHiddenOpt = 'show-hidden';\n  options.showHiddenOpt = defaultShowHiddenOpt;\n\n  self.addShowHiddenOpt = self.showHidden = function addShowHiddenOpt(opt, msg) {\n    argsert('[string|boolean] [string]', [opt, msg], arguments.length);\n\n    if (arguments.length === 1) {\n      if (opt === false) return self;\n    }\n\n    const showHiddenOpt = typeof opt === 'string' ? opt : defaultShowHiddenOpt;\n    self.boolean(showHiddenOpt);\n    self.describe(showHiddenOpt, msg || usage.deferY18nLookup('Show hidden options'));\n    options.showHiddenOpt = showHiddenOpt;\n    return self;\n  };\n\n  self.hide = function hide(key) {\n    argsert('<string|object>', [key], arguments.length);\n    options.hiddenOptions.push(key);\n    return self;\n  };\n\n  self.showHelpOnFail = function showHelpOnFail(enabled, message) {\n    argsert('[boolean|string] [string]', [enabled, message], arguments.length);\n    usage.showHelpOnFail(enabled, message);\n    return self;\n  };\n\n  var exitProcess = true;\n\n  self.exitProcess = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length);\n\n    if (typeof enabled !== 'boolean') {\n      enabled = true;\n    }\n\n    exitProcess = enabled;\n    return self;\n  };\n\n  self.getExitProcess = () => exitProcess;\n\n  var completionCommand = null;\n\n  self.completion = function (cmd, desc, fn) {\n    argsert('[string] [string|boolean|function] [function]', [cmd, desc, fn], arguments.length); // a function to execute when generating\n    // completions can be provided as the second\n    // or third argument to completion.\n\n    if (typeof desc === 'function') {\n      fn = desc;\n      desc = null;\n    } // register the completion command.\n\n\n    completionCommand = cmd || completionCommand || 'completion';\n\n    if (!desc && desc !== false) {\n      desc = 'generate completion script';\n    }\n\n    self.command(completionCommand, desc); // a function can be provided\n\n    if (fn) completion.registerFunction(fn);\n    return self;\n  };\n\n  self.showCompletionScript = function ($0, cmd) {\n    argsert('[string] [string]', [$0, cmd], arguments.length);\n    $0 = $0 || self.$0;\n\n    _logger.log(completion.generateCompletionScript($0, cmd || completionCommand || 'completion'));\n\n    return self;\n  };\n\n  self.getCompletion = function (args, done) {\n    argsert('<array> <function>', [args, done], arguments.length);\n    completion.getCompletion(args, done);\n  };\n\n  self.locale = function (locale) {\n    argsert('[string]', [locale], arguments.length);\n\n    if (arguments.length === 0) {\n      guessLocale();\n      return y18n.getLocale();\n    }\n\n    detectLocale = false;\n    y18n.setLocale(locale);\n    return self;\n  };\n\n  self.updateStrings = self.updateLocale = function (obj) {\n    argsert('<object>', [obj], arguments.length);\n    detectLocale = false;\n    y18n.updateLocale(obj);\n    return self;\n  };\n\n  let detectLocale = true;\n\n  self.detectLocale = function (detect) {\n    argsert('<boolean>', [detect], arguments.length);\n    detectLocale = detect;\n    return self;\n  };\n\n  self.getDetectLocale = () => detectLocale;\n\n  var hasOutput = false;\n  var exitError = null; // maybe exit, always capture\n  // context about why we wanted to exit.\n\n  self.exit = (code, err) => {\n    hasOutput = true;\n    exitError = err;\n    if (exitProcess) process.exit(code);\n  }; // we use a custom logger that buffers output,\n  // so that we can print to non-CLIs, e.g., chat-bots.\n\n\n  const _logger = {\n    log() {\n      const args = [];\n\n      for (let i = 0; i < arguments.length; i++) args.push(arguments[i]);\n\n      if (!self._hasParseCallback()) console.log.apply(console, args);\n      hasOutput = true;\n      if (output.length) output += '\\n';\n      output += args.join(' ');\n    },\n\n    error() {\n      const args = [];\n\n      for (let i = 0; i < arguments.length; i++) args.push(arguments[i]);\n\n      if (!self._hasParseCallback()) console.error.apply(console, args);\n      hasOutput = true;\n      if (output.length) output += '\\n';\n      output += args.join(' ');\n    }\n\n  };\n\n  self._getLoggerInstance = () => _logger; // has yargs output an error our help\n  // message in the current execution context.\n\n\n  self._hasOutput = () => hasOutput;\n\n  self._setHasOutput = () => {\n    hasOutput = true;\n  };\n\n  let recommendCommands;\n\n  self.recommendCommands = function (recommend) {\n    argsert('[boolean]', [recommend], arguments.length);\n    recommendCommands = typeof recommend === 'boolean' ? recommend : true;\n    return self;\n  };\n\n  self.getUsageInstance = () => usage;\n\n  self.getValidationInstance = () => validation;\n\n  self.getCommandInstance = () => command;\n\n  self.terminalWidth = () => {\n    argsert([], 0);\n    return typeof process.stdout.columns !== 'undefined' ? process.stdout.columns : null;\n  };\n\n  Object.defineProperty(self, 'argv', {\n    get: () => self._parseArgs(processArgs),\n    enumerable: true\n  });\n\n  self._parseArgs = function parseArgs(args, shortCircuit, _calledFromCommand, commandIndex) {\n    let skipValidation = !!_calledFromCommand;\n    args = args || processArgs;\n    options.__ = y18n.__;\n    options.configuration = self.getParserConfiguration(); // Deprecated\n\n    let pkgConfig = pkgUp()['yargs'];\n\n    if (pkgConfig) {\n      console.warn('Configuring yargs through package.json is deprecated and will be removed in a future major release, please use the JS API instead.');\n      options.configuration = Object.assign({}, pkgConfig, options.configuration);\n    }\n\n    const populateDoubleDash = !!options.configuration['populate--'];\n    const config = Object.assign({}, options.configuration, {\n      'populate--': true\n    });\n    const parsed = Parser.detailed(args, Object.assign({}, options, {\n      configuration: config\n    }));\n    let argv = parsed.argv;\n    if (parseContext) argv = Object.assign({}, argv, parseContext);\n    const aliases = parsed.aliases;\n    argv.$0 = self.$0;\n    self.parsed = parsed;\n\n    try {\n      guessLocale(); // guess locale lazily, so that it can be turned off in chain.\n      // while building up the argv object, there\n      // are two passes through the parser. If completion\n      // is being performed short-circuit on the first pass.\n\n      if (shortCircuit) {\n        return populateDoubleDash || _calledFromCommand ? argv : self._copyDoubleDash(argv);\n      } // if there's a handler associated with a\n      // command defer processing to it.\n\n\n      if (helpOpt) {\n        // consider any multi-char helpOpt alias as a valid help command\n        // unless all helpOpt aliases are single-char\n        // note that parsed.aliases is a normalized bidirectional map :)\n        const helpCmds = [helpOpt].concat(aliases[helpOpt] || []).filter(k => k.length > 1); // check if help should trigger and strip it from _.\n\n        if (~helpCmds.indexOf(argv._[argv._.length - 1])) {\n          argv._.pop();\n\n          argv[helpOpt] = true;\n        }\n      }\n\n      const handlerKeys = command.getCommands();\n      const requestCompletions = (completion.completionKey in argv);\n      const skipRecommendation = argv[helpOpt] || requestCompletions;\n      const skipDefaultCommand = skipRecommendation && (handlerKeys.length > 1 || handlerKeys[0] !== '$0');\n\n      if (argv._.length) {\n        if (handlerKeys.length) {\n          let firstUnknownCommand;\n\n          for (let i = commandIndex || 0, cmd; argv._[i] !== undefined; i++) {\n            cmd = String(argv._[i]);\n\n            if (~handlerKeys.indexOf(cmd) && cmd !== completionCommand) {\n              // commands are executed using a recursive algorithm that executes\n              // the deepest command first; we keep track of the position in the\n              // argv._ array that is currently being executed.\n              const innerArgv = command.runCommand(cmd, self, parsed, i + 1);\n              return populateDoubleDash ? innerArgv : self._copyDoubleDash(innerArgv);\n            } else if (!firstUnknownCommand && cmd !== completionCommand) {\n              firstUnknownCommand = cmd;\n              break;\n            }\n          } // run the default command, if defined\n\n\n          if (command.hasDefaultCommand() && !skipDefaultCommand) {\n            const innerArgv = command.runCommand(null, self, parsed);\n            return populateDoubleDash ? innerArgv : self._copyDoubleDash(innerArgv);\n          } // recommend a command if recommendCommands() has\n          // been enabled, and no commands were found to execute\n\n\n          if (recommendCommands && firstUnknownCommand && !skipRecommendation) {\n            validation.recommendCommands(firstUnknownCommand, handlerKeys);\n          }\n        } // generate a completion script for adding to ~/.bashrc.\n\n\n        if (completionCommand && ~argv._.indexOf(completionCommand) && !requestCompletions) {\n          if (exitProcess) setBlocking(true);\n          self.showCompletionScript();\n          self.exit(0);\n        }\n      } else if (command.hasDefaultCommand() && !skipDefaultCommand) {\n        const innerArgv = command.runCommand(null, self, parsed);\n        return populateDoubleDash ? innerArgv : self._copyDoubleDash(innerArgv);\n      } // we must run completions first, a user might\n      // want to complete the --help or --version option.\n\n\n      if (requestCompletions) {\n        if (exitProcess) setBlocking(true); // we allow for asynchronous completions,\n        // e.g., loading in a list of commands from an API.\n\n        const completionArgs = args.slice(args.indexOf(`--${completion.completionKey}`) + 1);\n        completion.getCompletion(completionArgs, completions => {\n          ;\n          (completions || []).forEach(completion => {\n            _logger.log(completion);\n          });\n          self.exit(0);\n        });\n        return populateDoubleDash || _calledFromCommand ? argv : self._copyDoubleDash(argv);\n      } // Handle 'help' and 'version' options\n      // if we haven't already output help!\n\n\n      if (!hasOutput) {\n        Object.keys(argv).forEach(key => {\n          if (key === helpOpt && argv[key]) {\n            if (exitProcess) setBlocking(true);\n            skipValidation = true;\n            self.showHelp('log');\n            self.exit(0);\n          } else if (key === versionOpt && argv[key]) {\n            if (exitProcess) setBlocking(true);\n            skipValidation = true;\n            usage.showVersion();\n            self.exit(0);\n          }\n        });\n      } // Check if any of the options to skip validation were provided\n\n\n      if (!skipValidation && options.skipValidation.length > 0) {\n        skipValidation = Object.keys(argv).some(key => options.skipValidation.indexOf(key) >= 0 && argv[key] === true);\n      } // If the help or version options where used and exitProcess is false,\n      // or if explicitly skipped, we won't run validations.\n\n\n      if (!skipValidation) {\n        if (parsed.error) throw new YError(parsed.error.message); // if we're executed via bash completion, don't\n        // bother with validation.\n\n        if (!requestCompletions) {\n          self._runValidation(argv, aliases, {}, parsed.error);\n        }\n      }\n    } catch (err) {\n      if (err instanceof YError) usage.fail(err.message, err);else throw err;\n    }\n\n    return populateDoubleDash || _calledFromCommand ? argv : self._copyDoubleDash(argv);\n  }; // to simplify the parsing of positionals in commands,\n  // we temporarily populate '--' rather than _, with arguments\n  // after the '--' directive. After the parse, we copy these back.\n\n\n  self._copyDoubleDash = function (argv) {\n    if (!argv._ || !argv['--']) return argv;\n\n    argv._.push.apply(argv._, argv['--']); // TODO(bcoe): refactor command parsing such that this delete is not\n    // necessary: https://github.com/yargs/yargs/issues/1482\n\n\n    try {\n      delete argv['--'];\n    } catch (_err) {}\n\n    return argv;\n  };\n\n  self._runValidation = function runValidation(argv, aliases, positionalMap, parseErrors) {\n    if (parseErrors) throw new YError(parseErrors.message || parseErrors);\n    validation.nonOptionCount(argv);\n    validation.requiredArguments(argv);\n    if (strict) validation.unknownArguments(argv, aliases, positionalMap);\n    validation.customChecks(argv, aliases);\n    validation.limitedChoices(argv);\n    validation.implications(argv);\n    validation.conflicting(argv);\n  };\n\n  function guessLocale() {\n    if (!detectLocale) return;\n\n    try {\n      const {\n        env\n      } = process;\n      const locale = env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE || 'en_US';\n      self.locale(locale.replace(/[.:].*/, ''));\n    } catch (err) {// if we explode looking up locale just noop\n      // we'll keep using the default language 'en'.\n    }\n  } // an app should almost always have --version and --help,\n  // if you *really* want to disable this use .help(false)/.version(false).\n\n\n  self.help();\n  self.version();\n  return self;\n} // rebase an absolute path to a relative one with respect to a base directory\n// exported for tests\n\n\nexports.rebase = rebase;\n\nfunction rebase(base, dir) {\n  return path.relative(base, dir);\n}","map":{"version":3,"names":["argsert","require","fs","Command","Completion","Parser","path","Usage","Validation","Y18n","objFilter","setBlocking","applyExtends","globalMiddlewareFactory","YError","exports","module","Yargs","processArgs","cwd","parentRequire","self","command","completion","groups","globalMiddleware","output","preservedGroups","usage","validation","y18n","directory","resolve","__dirname","updateFiles","middleware","process","scriptName","customScriptName","$0","test","argv","slice","map","x","i","b","rebase","match","length","join","trim","env","_","undefined","replace","dirname","execPath","context","resets","commands","fullCommands","files","getContext","options","resetOptions","reset","aliases","tmpOptions","local","configObjects","localLookup","forEach","l","a","Object","assign","keys","reduce","acc","groupName","filter","key","arrayOptions","objectOptions","k","v","envPrefix","completionCommand","exitError","hasOutput","parsed","frozens","freeze","frozen","push","exitProcess","strict","parseFn","parseContext","unfreeze","pop","boolean","arguments","populateParserHintArray","array","number","normalize","count","string","requiresArg","populateParserHintObject","nargs","skipValidation","type","value","concat","sanitizeKey","choices","alias","default","defaults","defaultDescription","functionDescription","call","describe","desc","demandOption","msg","coerce","builder","isArray","Array","temp","create","deleteFromParserHintObject","optionKey","hintKey","hint","indexOf","splice","getDescriptions","config","getParserConfiguration","deferY18nLookup","example","cmd","description","handler","middlewares","addHandler","commandDir","dir","opts","req","addDirectory","demand","required","max","Infinity","demandCommand","min","minMsg","maxMsg","global","demandedCommands","getDemandedOptions","demandedOptions","getDemandedCommands","implies","conflicts","key1","key2","epilogue","epilog","fail","f","failFn","check","_global","globals","g","pkgConf","rootPath","conf","obj","pkgUp","pkgs","npath","findUp","startDir","extname","pkgJsonPath","sync","JSON","parse","readFileSync","noop","args","shortCircuit","_parseFn","_parseArgs","tmpParsed","_getParseContext","_hasParseCallback","option","opt","configParser","group","hidden","hide","getOptions","positional","supportedOpts","accept","fullCommand","parseOptions","cmdToParseOptions","pk","getPositionalGroupName","existing","seen","getGroups","prefix","wrap","cols","enabled","getStrict","parserConfig","parserConfiguration","showHelp","level","hasDefaultCommand","runDefaultBuilderOn","versionOpt","version","ver","defaultVersionOpt","guessVersion","helpOpt","addHelpOpt","help","defaultHelpOpt","defaultShowHiddenOpt","showHiddenOpt","addShowHiddenOpt","showHidden","hiddenOptions","showHelpOnFail","message","getExitProcess","fn","registerFunction","showCompletionScript","_logger","log","generateCompletionScript","getCompletion","done","locale","guessLocale","getLocale","detectLocale","setLocale","updateStrings","updateLocale","detect","getDetectLocale","exit","code","err","console","apply","error","_getLoggerInstance","_hasOutput","_setHasOutput","recommendCommands","recommend","getUsageInstance","getValidationInstance","getCommandInstance","terminalWidth","stdout","columns","defineProperty","get","enumerable","parseArgs","_calledFromCommand","commandIndex","__","configuration","pkgConfig","warn","populateDoubleDash","detailed","_copyDoubleDash","helpCmds","handlerKeys","getCommands","requestCompletions","completionKey","skipRecommendation","skipDefaultCommand","firstUnknownCommand","String","innerArgv","runCommand","completionArgs","completions","showVersion","some","_runValidation","_err","runValidation","positionalMap","parseErrors","nonOptionCount","requiredArguments","unknownArguments","customChecks","limitedChoices","implications","conflicting","LC_ALL","LC_MESSAGES","LANG","LANGUAGE","base","relative"],"sources":["/home/lawrence/learn-react/react-notes-app/node_modules/yargs/yargs.js"],"sourcesContent":["'use strict'\nconst argsert = require('./lib/argsert')\nconst fs = require('fs')\nconst Command = require('./lib/command')\nconst Completion = require('./lib/completion')\nconst Parser = require('yargs-parser')\nconst path = require('path')\nconst Usage = require('./lib/usage')\nconst Validation = require('./lib/validation')\nconst Y18n = require('y18n')\nconst objFilter = require('./lib/obj-filter')\nconst setBlocking = require('set-blocking')\nconst applyExtends = require('./lib/apply-extends')\nconst { globalMiddlewareFactory } = require('./lib/middleware')\nconst YError = require('./lib/yerror')\n\nexports = module.exports = Yargs\nfunction Yargs (processArgs, cwd, parentRequire) {\n  processArgs = processArgs || [] // handle calling yargs().\n\n  const self = {}\n  let command = null\n  let completion = null\n  let groups = {}\n  let globalMiddleware = []\n  let output = ''\n  let preservedGroups = {}\n  let usage = null\n  let validation = null\n\n  const y18n = Y18n({\n    directory: path.resolve(__dirname, './locales'),\n    updateFiles: false\n  })\n\n  self.middleware = globalMiddlewareFactory(globalMiddleware, self)\n\n  if (!cwd) cwd = process.cwd()\n\n  self.scriptName = function (scriptName) {\n    self.customScriptName = true\n    self.$0 = scriptName\n    return self\n  }\n\n  // ignore the node bin, specify this in your\n  // bin file with #!/usr/bin/env node\n  if (/\\b(node|iojs|electron)(\\.exe)?$/.test(process.argv[0])) {\n    self.$0 = process.argv.slice(1, 2)\n  } else {\n    self.$0 = process.argv.slice(0, 1)\n  }\n\n  self.$0 = self.$0\n    .map((x, i) => {\n      const b = rebase(cwd, x)\n      return x.match(/^(\\/|([a-zA-Z]:)?\\\\)/) && b.length < x.length ? b : x\n    })\n    .join(' ').trim()\n\n  if (process.env._ !== undefined && process.argv[1] === process.env._) {\n    self.$0 = process.env._.replace(\n      `${path.dirname(process.execPath)}/`, ''\n    )\n  }\n\n  // use context object to keep track of resets, subcommand execution, etc\n  // submodules should modify and check the state of context as necessary\n  const context = { resets: -1, commands: [], fullCommands: [], files: [] }\n  self.getContext = () => context\n\n  // puts yargs back into an initial state. any keys\n  // that have been set to \"global\" will not be reset\n  // by this action.\n  let options\n  self.resetOptions = self.reset = function resetOptions (aliases) {\n    context.resets++\n    aliases = aliases || {}\n    options = options || {}\n    // put yargs back into an initial state, this\n    // logic is used to build a nested command\n    // hierarchy.\n    const tmpOptions = {}\n    tmpOptions.local = options.local ? options.local : []\n    tmpOptions.configObjects = options.configObjects ? options.configObjects : []\n\n    // if a key has been explicitly set as local,\n    // we should reset it before passing options to command.\n    const localLookup = {}\n    tmpOptions.local.forEach((l) => {\n      localLookup[l] = true\n      ;(aliases[l] || []).forEach((a) => {\n        localLookup[a] = true\n      })\n    })\n\n    // add all groups not set to local to preserved groups\n    Object.assign(\n      preservedGroups,\n      Object.keys(groups).reduce((acc, groupName) => {\n        const keys = groups[groupName].filter(key => !(key in localLookup))\n        if (keys.length > 0) {\n          acc[groupName] = keys\n        }\n        return acc\n      }, {})\n    )\n    // groups can now be reset\n    groups = {}\n\n    const arrayOptions = [\n      'array', 'boolean', 'string', 'skipValidation',\n      'count', 'normalize', 'number',\n      'hiddenOptions'\n    ]\n\n    const objectOptions = [\n      'narg', 'key', 'alias', 'default', 'defaultDescription',\n      'config', 'choices', 'demandedOptions', 'demandedCommands', 'coerce'\n    ]\n\n    arrayOptions.forEach((k) => {\n      tmpOptions[k] = (options[k] || []).filter(k => !localLookup[k])\n    })\n\n    objectOptions.forEach((k) => {\n      tmpOptions[k] = objFilter(options[k], (k, v) => !localLookup[k])\n    })\n\n    tmpOptions.envPrefix = options.envPrefix\n    options = tmpOptions\n\n    // if this is the first time being executed, create\n    // instances of all our helpers -- otherwise just reset.\n    usage = usage ? usage.reset(localLookup) : Usage(self, y18n)\n    validation = validation ? validation.reset(localLookup) : Validation(self, usage, y18n)\n    command = command ? command.reset() : Command(self, usage, validation, globalMiddleware)\n    if (!completion) completion = Completion(self, usage, command)\n\n    completionCommand = null\n    output = ''\n    exitError = null\n    hasOutput = false\n    self.parsed = false\n\n    return self\n  }\n  self.resetOptions()\n\n  // temporary hack: allow \"freezing\" of reset-able state for parse(msg, cb)\n  let frozens = []\n  function freeze () {\n    let frozen = {}\n    frozens.push(frozen)\n    frozen.options = options\n    frozen.configObjects = options.configObjects.slice(0)\n    frozen.exitProcess = exitProcess\n    frozen.groups = groups\n    usage.freeze()\n    validation.freeze()\n    command.freeze()\n    frozen.strict = strict\n    frozen.completionCommand = completionCommand\n    frozen.output = output\n    frozen.exitError = exitError\n    frozen.hasOutput = hasOutput\n    frozen.parsed = self.parsed\n    frozen.parseFn = parseFn\n    frozen.parseContext = parseContext\n  }\n  function unfreeze () {\n    let frozen = frozens.pop()\n    options = frozen.options\n    options.configObjects = frozen.configObjects\n    exitProcess = frozen.exitProcess\n    groups = frozen.groups\n    output = frozen.output\n    exitError = frozen.exitError\n    hasOutput = frozen.hasOutput\n    self.parsed = frozen.parsed\n    usage.unfreeze()\n    validation.unfreeze()\n    command.unfreeze()\n    strict = frozen.strict\n    completionCommand = frozen.completionCommand\n    parseFn = frozen.parseFn\n    parseContext = frozen.parseContext\n  }\n\n  self.boolean = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('boolean', keys)\n    return self\n  }\n\n  self.array = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('array', keys)\n    return self\n  }\n\n  self.number = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('number', keys)\n    return self\n  }\n\n  self.normalize = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('normalize', keys)\n    return self\n  }\n\n  self.count = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('count', keys)\n    return self\n  }\n\n  self.string = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('string', keys)\n    return self\n  }\n\n  self.requiresArg = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintObject(self.nargs, false, 'narg', keys, 1)\n    return self\n  }\n\n  self.skipValidation = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('skipValidation', keys)\n    return self\n  }\n\n  function populateParserHintArray (type, keys, value) {\n    keys = [].concat(keys)\n    keys.forEach((key) => {\n      key = sanitizeKey(key)\n      options[type].push(key)\n    })\n  }\n\n  self.nargs = function (key, value) {\n    argsert('<string|object|array> [number]', [key, value], arguments.length)\n    populateParserHintObject(self.nargs, false, 'narg', key, value)\n    return self\n  }\n\n  self.choices = function (key, value) {\n    argsert('<object|string|array> [string|array]', [key, value], arguments.length)\n    populateParserHintObject(self.choices, true, 'choices', key, value)\n    return self\n  }\n\n  self.alias = function (key, value) {\n    argsert('<object|string|array> [string|array]', [key, value], arguments.length)\n    populateParserHintObject(self.alias, true, 'alias', key, value)\n    return self\n  }\n\n  // TODO: actually deprecate self.defaults.\n  self.default = self.defaults = function (key, value, defaultDescription) {\n    argsert('<object|string|array> [*] [string]', [key, value, defaultDescription], arguments.length)\n    if (defaultDescription) options.defaultDescription[key] = defaultDescription\n    if (typeof value === 'function') {\n      if (!options.defaultDescription[key]) options.defaultDescription[key] = usage.functionDescription(value)\n      value = value.call()\n    }\n    populateParserHintObject(self.default, false, 'default', key, value)\n    return self\n  }\n\n  self.describe = function (key, desc) {\n    argsert('<object|string|array> [string]', [key, desc], arguments.length)\n    populateParserHintObject(self.describe, false, 'key', key, true)\n    usage.describe(key, desc)\n    return self\n  }\n\n  self.demandOption = function (keys, msg) {\n    argsert('<object|string|array> [string]', [keys, msg], arguments.length)\n    populateParserHintObject(self.demandOption, false, 'demandedOptions', keys, msg)\n    return self\n  }\n\n  self.coerce = function (keys, value) {\n    argsert('<object|string|array> [function]', [keys, value], arguments.length)\n    populateParserHintObject(self.coerce, false, 'coerce', keys, value)\n    return self\n  }\n\n  function populateParserHintObject (builder, isArray, type, key, value) {\n    if (Array.isArray(key)) {\n      const temp = Object.create(null)\n      // an array of keys with one value ['x', 'y', 'z'], function parse () {}\n      key.forEach((k) => {\n        temp[k] = value\n      })\n      builder(temp)\n    } else if (typeof key === 'object') {\n      // an object of key value pairs: {'x': parse () {}, 'y': parse() {}}\n      Object.keys(key).forEach((k) => {\n        builder(k, key[k])\n      })\n    } else {\n      key = sanitizeKey(key)\n      // a single key value pair 'x', parse() {}\n      if (isArray) {\n        options[type][key] = (options[type][key] || []).concat(value)\n      } else {\n        options[type][key] = value\n      }\n    }\n  }\n\n  // TODO(bcoe): in future major versions move more objects towards\n  // Object.create(null):\n  function sanitizeKey (key) {\n    if (key === '__proto__') return '___proto___'\n    return key\n  }\n\n  function deleteFromParserHintObject (optionKey) {\n    // delete from all parsing hints:\n    // boolean, array, key, alias, etc.\n    Object.keys(options).forEach((hintKey) => {\n      const hint = options[hintKey]\n      if (Array.isArray(hint)) {\n        if (~hint.indexOf(optionKey)) hint.splice(hint.indexOf(optionKey), 1)\n      } else if (typeof hint === 'object') {\n        delete hint[optionKey]\n      }\n    })\n    // now delete the description from usage.js.\n    delete usage.getDescriptions()[optionKey]\n  }\n\n  self.config = function config (key, msg, parseFn) {\n    argsert('[object|string] [string|function] [function]', [key, msg, parseFn], arguments.length)\n    // allow a config object to be provided directly.\n    if (typeof key === 'object') {\n      key = applyExtends(key, cwd, self.getParserConfiguration()['deep-merge-config'])\n      options.configObjects = (options.configObjects || []).concat(key)\n      return self\n    }\n\n    // allow for a custom parsing function.\n    if (typeof msg === 'function') {\n      parseFn = msg\n      msg = null\n    }\n\n    key = key || 'config'\n    self.describe(key, msg || usage.deferY18nLookup('Path to JSON config file'))\n    ;(Array.isArray(key) ? key : [key]).forEach((k) => {\n      options.config[k] = parseFn || true\n    })\n\n    return self\n  }\n\n  self.example = function (cmd, description) {\n    argsert('<string> [string]', [cmd, description], arguments.length)\n    usage.example(cmd, description)\n    return self\n  }\n\n  self.command = function (cmd, description, builder, handler, middlewares) {\n    argsert('<string|array|object> [string|boolean] [function|object] [function] [array]', [cmd, description, builder, handler, middlewares], arguments.length)\n    command.addHandler(cmd, description, builder, handler, middlewares)\n    return self\n  }\n\n  self.commandDir = function (dir, opts) {\n    argsert('<string> [object]', [dir, opts], arguments.length)\n    const req = parentRequire || require\n    command.addDirectory(dir, self.getContext(), req, require('get-caller-file')(), opts)\n    return self\n  }\n\n  // TODO: deprecate self.demand in favor of\n  // .demandCommand() .demandOption().\n  self.demand = self.required = self.require = function demand (keys, max, msg) {\n    // you can optionally provide a 'max' key,\n    // which will raise an exception if too many '_'\n    // options are provided.\n    if (Array.isArray(max)) {\n      max.forEach((key) => {\n        self.demandOption(key, msg)\n      })\n      max = Infinity\n    } else if (typeof max !== 'number') {\n      msg = max\n      max = Infinity\n    }\n\n    if (typeof keys === 'number') {\n      self.demandCommand(keys, max, msg, msg)\n    } else if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        self.demandOption(key, msg)\n      })\n    } else {\n      if (typeof msg === 'string') {\n        self.demandOption(keys, msg)\n      } else if (msg === true || typeof msg === 'undefined') {\n        self.demandOption(keys)\n      }\n    }\n\n    return self\n  }\n\n  self.demandCommand = function demandCommand (min, max, minMsg, maxMsg) {\n    argsert('[number] [number|string] [string|null|undefined] [string|null|undefined]', [min, max, minMsg, maxMsg], arguments.length)\n\n    if (typeof min === 'undefined') min = 1\n\n    if (typeof max !== 'number') {\n      minMsg = max\n      max = Infinity\n    }\n\n    self.global('_', false)\n\n    options.demandedCommands._ = {\n      min,\n      max,\n      minMsg,\n      maxMsg\n    }\n\n    return self\n  }\n\n  self.getDemandedOptions = () => {\n    argsert([], 0)\n    return options.demandedOptions\n  }\n\n  self.getDemandedCommands = () => {\n    argsert([], 0)\n    return options.demandedCommands\n  }\n\n  self.implies = function (key, value) {\n    argsert('<string|object> [number|string|array]', [key, value], arguments.length)\n    validation.implies(key, value)\n    return self\n  }\n\n  self.conflicts = function (key1, key2) {\n    argsert('<string|object> [string|array]', [key1, key2], arguments.length)\n    validation.conflicts(key1, key2)\n    return self\n  }\n\n  self.usage = function (msg, description, builder, handler) {\n    argsert('<string|null|undefined> [string|boolean] [function|object] [function]', [msg, description, builder, handler], arguments.length)\n\n    if (description !== undefined) {\n      // .usage() can be used as an alias for defining\n      // a default command.\n      if ((msg || '').match(/^\\$0( |$)/)) {\n        return self.command(msg, description, builder, handler)\n      } else {\n        throw new YError('.usage() description must start with $0 if being used as alias for .command()')\n      }\n    } else {\n      usage.usage(msg)\n      return self\n    }\n  }\n\n  self.epilogue = self.epilog = function (msg) {\n    argsert('<string>', [msg], arguments.length)\n    usage.epilog(msg)\n    return self\n  }\n\n  self.fail = function (f) {\n    argsert('<function>', [f], arguments.length)\n    usage.failFn(f)\n    return self\n  }\n\n  self.check = function (f, _global) {\n    argsert('<function> [boolean]', [f, _global], arguments.length)\n    validation.check(f, _global !== false)\n    return self\n  }\n\n  self.global = function global (globals, global) {\n    argsert('<string|array> [boolean]', [globals, global], arguments.length)\n    globals = [].concat(globals)\n    if (global !== false) {\n      options.local = options.local.filter(l => globals.indexOf(l) === -1)\n    } else {\n      globals.forEach((g) => {\n        if (options.local.indexOf(g) === -1) options.local.push(g)\n      })\n    }\n    return self\n  }\n\n  self.pkgConf = function pkgConf (key, rootPath) {\n    argsert('<string> [string]', [key, rootPath], arguments.length)\n    let conf = null\n    // prefer cwd to require-main-filename in this method\n    // since we're looking for e.g. \"nyc\" config in nyc consumer\n    // rather than \"yargs\" config in nyc (where nyc is the main filename)\n    const obj = pkgUp(rootPath || cwd)\n\n    // If an object exists in the key, add it to options.configObjects\n    if (obj[key] && typeof obj[key] === 'object') {\n      conf = applyExtends(obj[key], rootPath || cwd, self.getParserConfiguration()['deep-merge-config'])\n      options.configObjects = (options.configObjects || []).concat(conf)\n    }\n\n    return self\n  }\n\n  const pkgs = {}\n  function pkgUp (rootPath) {\n    const npath = rootPath || '*'\n    if (pkgs[npath]) return pkgs[npath]\n    const findUp = require('find-up')\n\n    let obj = {}\n    try {\n      let startDir = rootPath || require('require-main-filename')(parentRequire || require)\n\n      // When called in an environment that lacks require.main.filename, such as a jest test runner,\n      // startDir is already process.cwd(), and should not be shortened.\n      // Whether or not it is _actually_ a directory (e.g., extensionless bin) is irrelevant, find-up handles it.\n      if (!rootPath && path.extname(startDir)) {\n        startDir = path.dirname(startDir)\n      }\n\n      const pkgJsonPath = findUp.sync('package.json', {\n        cwd: startDir\n      })\n      obj = JSON.parse(fs.readFileSync(pkgJsonPath))\n    } catch (noop) {}\n\n    pkgs[npath] = obj || {}\n    return pkgs[npath]\n  }\n\n  let parseFn = null\n  let parseContext = null\n  self.parse = function parse (args, shortCircuit, _parseFn) {\n    argsert('[string|array] [function|boolean|object] [function]', [args, shortCircuit, _parseFn], arguments.length)\n    freeze()\n    if (typeof args === 'undefined') {\n      const argv = self._parseArgs(processArgs)\n      const tmpParsed = self.parsed\n      unfreeze()\n      // TODO: remove this compatibility hack when we release yargs@15.x:\n      self.parsed = tmpParsed\n      return argv\n    }\n\n    // a context object can optionally be provided, this allows\n    // additional information to be passed to a command handler.\n    if (typeof shortCircuit === 'object') {\n      parseContext = shortCircuit\n      shortCircuit = _parseFn\n    }\n\n    // by providing a function as a second argument to\n    // parse you can capture output that would otherwise\n    // default to printing to stdout/stderr.\n    if (typeof shortCircuit === 'function') {\n      parseFn = shortCircuit\n      shortCircuit = null\n    }\n    // completion short-circuits the parsing process,\n    // skipping validation, etc.\n    if (!shortCircuit) processArgs = args\n\n    if (parseFn) exitProcess = false\n\n    const parsed = self._parseArgs(args, shortCircuit)\n    if (parseFn) parseFn(exitError, parsed, output)\n    unfreeze()\n\n    return parsed\n  }\n\n  self._getParseContext = () => parseContext || {}\n\n  self._hasParseCallback = () => !!parseFn\n\n  self.option = self.options = function option (key, opt) {\n    argsert('<string|object> [object]', [key, opt], arguments.length)\n    if (typeof key === 'object') {\n      Object.keys(key).forEach((k) => {\n        self.options(k, key[k])\n      })\n    } else {\n      if (typeof opt !== 'object') {\n        opt = {}\n      }\n\n      options.key[key] = true // track manually set keys.\n\n      if (opt.alias) self.alias(key, opt.alias)\n\n      const demand = opt.demand || opt.required || opt.require\n\n      // deprecated, use 'demandOption' instead\n      if (demand) {\n        self.demand(key, demand)\n      }\n\n      if (opt.demandOption) {\n        self.demandOption(key, typeof opt.demandOption === 'string' ? opt.demandOption : undefined)\n      }\n\n      if ('conflicts' in opt) {\n        self.conflicts(key, opt.conflicts)\n      }\n\n      if ('default' in opt) {\n        self.default(key, opt.default)\n      }\n\n      if ('implies' in opt) {\n        self.implies(key, opt.implies)\n      }\n\n      if ('nargs' in opt) {\n        self.nargs(key, opt.nargs)\n      }\n\n      if (opt.config) {\n        self.config(key, opt.configParser)\n      }\n\n      if (opt.normalize) {\n        self.normalize(key)\n      }\n\n      if ('choices' in opt) {\n        self.choices(key, opt.choices)\n      }\n\n      if ('coerce' in opt) {\n        self.coerce(key, opt.coerce)\n      }\n\n      if ('group' in opt) {\n        self.group(key, opt.group)\n      }\n\n      if (opt.boolean || opt.type === 'boolean') {\n        self.boolean(key)\n        if (opt.alias) self.boolean(opt.alias)\n      }\n\n      if (opt.array || opt.type === 'array') {\n        self.array(key)\n        if (opt.alias) self.array(opt.alias)\n      }\n\n      if (opt.number || opt.type === 'number') {\n        self.number(key)\n        if (opt.alias) self.number(opt.alias)\n      }\n\n      if (opt.string || opt.type === 'string') {\n        self.string(key)\n        if (opt.alias) self.string(opt.alias)\n      }\n\n      if (opt.count || opt.type === 'count') {\n        self.count(key)\n      }\n\n      if (typeof opt.global === 'boolean') {\n        self.global(key, opt.global)\n      }\n\n      if (opt.defaultDescription) {\n        options.defaultDescription[key] = opt.defaultDescription\n      }\n\n      if (opt.skipValidation) {\n        self.skipValidation(key)\n      }\n\n      const desc = opt.describe || opt.description || opt.desc\n      self.describe(key, desc)\n      if (opt.hidden) {\n        self.hide(key)\n      }\n\n      if (opt.requiresArg) {\n        self.requiresArg(key)\n      }\n    }\n\n    return self\n  }\n  self.getOptions = () => options\n\n  self.positional = function (key, opts) {\n    argsert('<string> <object>', [key, opts], arguments.length)\n    if (context.resets === 0) {\n      throw new YError(\".positional() can only be called in a command's builder function\")\n    }\n\n    // .positional() only supports a subset of the configuration\n    // options available to .option().\n    const supportedOpts = ['default', 'defaultDescription', 'implies', 'normalize',\n      'choices', 'conflicts', 'coerce', 'type', 'describe',\n      'desc', 'description', 'alias']\n    opts = objFilter(opts, (k, v) => {\n      let accept = supportedOpts.indexOf(k) !== -1\n      // type can be one of string|number|boolean.\n      if (k === 'type' && ['string', 'number', 'boolean'].indexOf(v) === -1) accept = false\n      return accept\n    })\n\n    // copy over any settings that can be inferred from the command string.\n    const fullCommand = context.fullCommands[context.fullCommands.length - 1]\n    const parseOptions = fullCommand ? command.cmdToParseOptions(fullCommand) : {\n      array: [],\n      alias: {},\n      default: {},\n      demand: {}\n    }\n    Object.keys(parseOptions).forEach((pk) => {\n      if (Array.isArray(parseOptions[pk])) {\n        if (parseOptions[pk].indexOf(key) !== -1) opts[pk] = true\n      } else {\n        if (parseOptions[pk][key] && !(pk in opts)) opts[pk] = parseOptions[pk][key]\n      }\n    })\n    self.group(key, usage.getPositionalGroupName())\n    return self.option(key, opts)\n  }\n\n  self.group = function group (opts, groupName) {\n    argsert('<string|array> <string>', [opts, groupName], arguments.length)\n    const existing = preservedGroups[groupName] || groups[groupName]\n    if (preservedGroups[groupName]) {\n      // we now only need to track this group name in groups.\n      delete preservedGroups[groupName]\n    }\n\n    const seen = {}\n    groups[groupName] = (existing || []).concat(opts).filter((key) => {\n      if (seen[key]) return false\n      return (seen[key] = true)\n    })\n    return self\n  }\n  // combine explicit and preserved groups. explicit groups should be first\n  self.getGroups = () => Object.assign({}, groups, preservedGroups)\n\n  // as long as options.envPrefix is not undefined,\n  // parser will apply env vars matching prefix to argv\n  self.env = function (prefix) {\n    argsert('[string|boolean]', [prefix], arguments.length)\n    if (prefix === false) options.envPrefix = undefined\n    else options.envPrefix = prefix || ''\n    return self\n  }\n\n  self.wrap = function (cols) {\n    argsert('<number|null|undefined>', [cols], arguments.length)\n    usage.wrap(cols)\n    return self\n  }\n\n  let strict = false\n  self.strict = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length)\n    strict = enabled !== false\n    return self\n  }\n  self.getStrict = () => strict\n\n  let parserConfig = {}\n  self.parserConfiguration = function parserConfiguration (config) {\n    argsert('<object>', [config], arguments.length)\n    parserConfig = config\n    return self\n  }\n  self.getParserConfiguration = () => parserConfig\n\n  self.showHelp = function (level) {\n    argsert('[string|function]', [level], arguments.length)\n    if (!self.parsed) self._parseArgs(processArgs) // run parser, if it has not already been executed.\n    if (command.hasDefaultCommand()) {\n      context.resets++ // override the restriction on top-level positoinals.\n      command.runDefaultBuilderOn(self, true)\n    }\n    usage.showHelp(level)\n    return self\n  }\n\n  let versionOpt = null\n  self.version = function version (opt, msg, ver) {\n    const defaultVersionOpt = 'version'\n    argsert('[boolean|string] [string] [string]', [opt, msg, ver], arguments.length)\n\n    // nuke the key previously configured\n    // to return version #.\n    if (versionOpt) {\n      deleteFromParserHintObject(versionOpt)\n      usage.version(undefined)\n      versionOpt = null\n    }\n\n    if (arguments.length === 0) {\n      ver = guessVersion()\n      opt = defaultVersionOpt\n    } else if (arguments.length === 1) {\n      if (opt === false) { // disable default 'version' key.\n        return self\n      }\n      ver = opt\n      opt = defaultVersionOpt\n    } else if (arguments.length === 2) {\n      ver = msg\n      msg = null\n    }\n\n    versionOpt = typeof opt === 'string' ? opt : defaultVersionOpt\n    msg = msg || usage.deferY18nLookup('Show version number')\n\n    usage.version(ver || undefined)\n    self.boolean(versionOpt)\n    self.describe(versionOpt, msg)\n    return self\n  }\n\n  function guessVersion () {\n    const obj = pkgUp()\n\n    return obj.version || 'unknown'\n  }\n\n  let helpOpt = null\n  self.addHelpOpt = self.help = function addHelpOpt (opt, msg) {\n    const defaultHelpOpt = 'help'\n    argsert('[string|boolean] [string]', [opt, msg], arguments.length)\n\n    // nuke the key previously configured\n    // to return help.\n    if (helpOpt) {\n      deleteFromParserHintObject(helpOpt)\n      helpOpt = null\n    }\n\n    if (arguments.length === 1) {\n      if (opt === false) return self\n    }\n\n    // use arguments, fallback to defaults for opt and msg\n    helpOpt = typeof opt === 'string' ? opt : defaultHelpOpt\n    self.boolean(helpOpt)\n    self.describe(helpOpt, msg || usage.deferY18nLookup('Show help'))\n    return self\n  }\n\n  const defaultShowHiddenOpt = 'show-hidden'\n  options.showHiddenOpt = defaultShowHiddenOpt\n  self.addShowHiddenOpt = self.showHidden = function addShowHiddenOpt (opt, msg) {\n    argsert('[string|boolean] [string]', [opt, msg], arguments.length)\n\n    if (arguments.length === 1) {\n      if (opt === false) return self\n    }\n\n    const showHiddenOpt = typeof opt === 'string' ? opt : defaultShowHiddenOpt\n    self.boolean(showHiddenOpt)\n    self.describe(showHiddenOpt, msg || usage.deferY18nLookup('Show hidden options'))\n    options.showHiddenOpt = showHiddenOpt\n    return self\n  }\n\n  self.hide = function hide (key) {\n    argsert('<string|object>', [key], arguments.length)\n    options.hiddenOptions.push(key)\n    return self\n  }\n\n  self.showHelpOnFail = function showHelpOnFail (enabled, message) {\n    argsert('[boolean|string] [string]', [enabled, message], arguments.length)\n    usage.showHelpOnFail(enabled, message)\n    return self\n  }\n\n  var exitProcess = true\n  self.exitProcess = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length)\n    if (typeof enabled !== 'boolean') {\n      enabled = true\n    }\n    exitProcess = enabled\n    return self\n  }\n  self.getExitProcess = () => exitProcess\n\n  var completionCommand = null\n  self.completion = function (cmd, desc, fn) {\n    argsert('[string] [string|boolean|function] [function]', [cmd, desc, fn], arguments.length)\n\n    // a function to execute when generating\n    // completions can be provided as the second\n    // or third argument to completion.\n    if (typeof desc === 'function') {\n      fn = desc\n      desc = null\n    }\n\n    // register the completion command.\n    completionCommand = cmd || completionCommand || 'completion'\n    if (!desc && desc !== false) {\n      desc = 'generate completion script'\n    }\n    self.command(completionCommand, desc)\n\n    // a function can be provided\n    if (fn) completion.registerFunction(fn)\n\n    return self\n  }\n\n  self.showCompletionScript = function ($0, cmd) {\n    argsert('[string] [string]', [$0, cmd], arguments.length)\n    $0 = $0 || self.$0\n    _logger.log(completion.generateCompletionScript($0, cmd || completionCommand || 'completion'))\n    return self\n  }\n\n  self.getCompletion = function (args, done) {\n    argsert('<array> <function>', [args, done], arguments.length)\n    completion.getCompletion(args, done)\n  }\n\n  self.locale = function (locale) {\n    argsert('[string]', [locale], arguments.length)\n    if (arguments.length === 0) {\n      guessLocale()\n      return y18n.getLocale()\n    }\n    detectLocale = false\n    y18n.setLocale(locale)\n    return self\n  }\n\n  self.updateStrings = self.updateLocale = function (obj) {\n    argsert('<object>', [obj], arguments.length)\n    detectLocale = false\n    y18n.updateLocale(obj)\n    return self\n  }\n\n  let detectLocale = true\n  self.detectLocale = function (detect) {\n    argsert('<boolean>', [detect], arguments.length)\n    detectLocale = detect\n    return self\n  }\n  self.getDetectLocale = () => detectLocale\n\n  var hasOutput = false\n  var exitError = null\n  // maybe exit, always capture\n  // context about why we wanted to exit.\n  self.exit = (code, err) => {\n    hasOutput = true\n    exitError = err\n    if (exitProcess) process.exit(code)\n  }\n\n  // we use a custom logger that buffers output,\n  // so that we can print to non-CLIs, e.g., chat-bots.\n  const _logger = {\n    log () {\n      const args = []\n      for (let i = 0; i < arguments.length; i++) args.push(arguments[i])\n      if (!self._hasParseCallback()) console.log.apply(console, args)\n      hasOutput = true\n      if (output.length) output += '\\n'\n      output += args.join(' ')\n    },\n    error () {\n      const args = []\n      for (let i = 0; i < arguments.length; i++) args.push(arguments[i])\n      if (!self._hasParseCallback()) console.error.apply(console, args)\n      hasOutput = true\n      if (output.length) output += '\\n'\n      output += args.join(' ')\n    }\n  }\n  self._getLoggerInstance = () => _logger\n  // has yargs output an error our help\n  // message in the current execution context.\n  self._hasOutput = () => hasOutput\n\n  self._setHasOutput = () => {\n    hasOutput = true\n  }\n\n  let recommendCommands\n  self.recommendCommands = function (recommend) {\n    argsert('[boolean]', [recommend], arguments.length)\n    recommendCommands = typeof recommend === 'boolean' ? recommend : true\n    return self\n  }\n\n  self.getUsageInstance = () => usage\n\n  self.getValidationInstance = () => validation\n\n  self.getCommandInstance = () => command\n\n  self.terminalWidth = () => {\n    argsert([], 0)\n    return typeof process.stdout.columns !== 'undefined' ? process.stdout.columns : null\n  }\n\n  Object.defineProperty(self, 'argv', {\n    get: () => self._parseArgs(processArgs),\n    enumerable: true\n  })\n\n  self._parseArgs = function parseArgs (args, shortCircuit, _calledFromCommand, commandIndex) {\n    let skipValidation = !!_calledFromCommand\n    args = args || processArgs\n\n    options.__ = y18n.__\n    options.configuration = self.getParserConfiguration()\n    // Deprecated\n    let pkgConfig = pkgUp()['yargs']\n    if (pkgConfig) {\n      console.warn('Configuring yargs through package.json is deprecated and will be removed in a future major release, please use the JS API instead.')\n      options.configuration = Object.assign({}, pkgConfig, options.configuration)\n    }\n\n    const populateDoubleDash = !!options.configuration['populate--']\n    const config = Object.assign({}, options.configuration, {\n      'populate--': true\n    })\n    const parsed = Parser.detailed(args, Object.assign({}, options, {\n      configuration: config\n    }))\n\n    let argv = parsed.argv\n    if (parseContext) argv = Object.assign({}, argv, parseContext)\n    const aliases = parsed.aliases\n\n    argv.$0 = self.$0\n    self.parsed = parsed\n\n    try {\n      guessLocale() // guess locale lazily, so that it can be turned off in chain.\n\n      // while building up the argv object, there\n      // are two passes through the parser. If completion\n      // is being performed short-circuit on the first pass.\n      if (shortCircuit) {\n        return (populateDoubleDash || _calledFromCommand) ? argv : self._copyDoubleDash(argv)\n      }\n\n      // if there's a handler associated with a\n      // command defer processing to it.\n      if (helpOpt) {\n        // consider any multi-char helpOpt alias as a valid help command\n        // unless all helpOpt aliases are single-char\n        // note that parsed.aliases is a normalized bidirectional map :)\n        const helpCmds = [helpOpt]\n          .concat(aliases[helpOpt] || [])\n          .filter(k => k.length > 1)\n        // check if help should trigger and strip it from _.\n        if (~helpCmds.indexOf(argv._[argv._.length - 1])) {\n          argv._.pop()\n          argv[helpOpt] = true\n        }\n      }\n\n      const handlerKeys = command.getCommands()\n      const requestCompletions = completion.completionKey in argv\n      const skipRecommendation = argv[helpOpt] || requestCompletions\n      const skipDefaultCommand = skipRecommendation && (handlerKeys.length > 1 || handlerKeys[0] !== '$0')\n\n      if (argv._.length) {\n        if (handlerKeys.length) {\n          let firstUnknownCommand\n          for (let i = (commandIndex || 0), cmd; argv._[i] !== undefined; i++) {\n            cmd = String(argv._[i])\n            if (~handlerKeys.indexOf(cmd) && cmd !== completionCommand) {\n              // commands are executed using a recursive algorithm that executes\n              // the deepest command first; we keep track of the position in the\n              // argv._ array that is currently being executed.\n              const innerArgv = command.runCommand(cmd, self, parsed, i + 1)\n              return populateDoubleDash ? innerArgv : self._copyDoubleDash(innerArgv)\n            } else if (!firstUnknownCommand && cmd !== completionCommand) {\n              firstUnknownCommand = cmd\n              break\n            }\n          }\n\n          // run the default command, if defined\n          if (command.hasDefaultCommand() && !skipDefaultCommand) {\n            const innerArgv = command.runCommand(null, self, parsed)\n            return populateDoubleDash ? innerArgv : self._copyDoubleDash(innerArgv)\n          }\n\n          // recommend a command if recommendCommands() has\n          // been enabled, and no commands were found to execute\n          if (recommendCommands && firstUnknownCommand && !skipRecommendation) {\n            validation.recommendCommands(firstUnknownCommand, handlerKeys)\n          }\n        }\n\n        // generate a completion script for adding to ~/.bashrc.\n        if (completionCommand && ~argv._.indexOf(completionCommand) && !requestCompletions) {\n          if (exitProcess) setBlocking(true)\n          self.showCompletionScript()\n          self.exit(0)\n        }\n      } else if (command.hasDefaultCommand() && !skipDefaultCommand) {\n        const innerArgv = command.runCommand(null, self, parsed)\n        return populateDoubleDash ? innerArgv : self._copyDoubleDash(innerArgv)\n      }\n\n      // we must run completions first, a user might\n      // want to complete the --help or --version option.\n      if (requestCompletions) {\n        if (exitProcess) setBlocking(true)\n\n        // we allow for asynchronous completions,\n        // e.g., loading in a list of commands from an API.\n        const completionArgs = args.slice(args.indexOf(`--${completion.completionKey}`) + 1)\n        completion.getCompletion(completionArgs, (completions) => {\n          ;(completions || []).forEach((completion) => {\n            _logger.log(completion)\n          })\n\n          self.exit(0)\n        })\n        return (populateDoubleDash || _calledFromCommand) ? argv : self._copyDoubleDash(argv)\n      }\n\n      // Handle 'help' and 'version' options\n      // if we haven't already output help!\n      if (!hasOutput) {\n        Object.keys(argv).forEach((key) => {\n          if (key === helpOpt && argv[key]) {\n            if (exitProcess) setBlocking(true)\n\n            skipValidation = true\n            self.showHelp('log')\n            self.exit(0)\n          } else if (key === versionOpt && argv[key]) {\n            if (exitProcess) setBlocking(true)\n\n            skipValidation = true\n            usage.showVersion()\n            self.exit(0)\n          }\n        })\n      }\n\n      // Check if any of the options to skip validation were provided\n      if (!skipValidation && options.skipValidation.length > 0) {\n        skipValidation = Object.keys(argv).some(key => options.skipValidation.indexOf(key) >= 0 && argv[key] === true)\n      }\n\n      // If the help or version options where used and exitProcess is false,\n      // or if explicitly skipped, we won't run validations.\n      if (!skipValidation) {\n        if (parsed.error) throw new YError(parsed.error.message)\n\n        // if we're executed via bash completion, don't\n        // bother with validation.\n        if (!requestCompletions) {\n          self._runValidation(argv, aliases, {}, parsed.error)\n        }\n      }\n    } catch (err) {\n      if (err instanceof YError) usage.fail(err.message, err)\n      else throw err\n    }\n\n    return (populateDoubleDash || _calledFromCommand) ? argv : self._copyDoubleDash(argv)\n  }\n\n  // to simplify the parsing of positionals in commands,\n  // we temporarily populate '--' rather than _, with arguments\n  // after the '--' directive. After the parse, we copy these back.\n  self._copyDoubleDash = function (argv) {\n    if (!argv._ || !argv['--']) return argv\n    argv._.push.apply(argv._, argv['--'])\n\n    // TODO(bcoe): refactor command parsing such that this delete is not\n    // necessary: https://github.com/yargs/yargs/issues/1482\n    try {\n      delete argv['--']\n    } catch (_err) {}\n\n    return argv\n  }\n\n  self._runValidation = function runValidation (argv, aliases, positionalMap, parseErrors) {\n    if (parseErrors) throw new YError(parseErrors.message || parseErrors)\n    validation.nonOptionCount(argv)\n    validation.requiredArguments(argv)\n    if (strict) validation.unknownArguments(argv, aliases, positionalMap)\n    validation.customChecks(argv, aliases)\n    validation.limitedChoices(argv)\n    validation.implications(argv)\n    validation.conflicting(argv)\n  }\n\n  function guessLocale () {\n    if (!detectLocale) return\n\n    try {\n      const { env } = process\n      const locale = env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE || 'en_US'\n      self.locale(locale.replace(/[.:].*/, ''))\n    } catch (err) {\n      // if we explode looking up locale just noop\n      // we'll keep using the default language 'en'.\n    }\n  }\n\n  // an app should almost always have --version and --help,\n  // if you *really* want to disable this use .help(false)/.version(false).\n  self.help()\n  self.version()\n\n  return self\n}\n\n// rebase an absolute path to a relative one with respect to a base directory\n// exported for tests\nexports.rebase = rebase\nfunction rebase (base, dir) {\n  return path.relative(base, dir)\n}\n"],"mappings":"AAAA;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,kBAAD,CAA1B;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,cAAD,CAAtB;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMM,KAAK,GAAGN,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMO,UAAU,GAAGP,OAAO,CAAC,kBAAD,CAA1B;;AACA,MAAMQ,IAAI,GAAGR,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMS,SAAS,GAAGT,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMU,WAAW,GAAGV,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAMW,YAAY,GAAGX,OAAO,CAAC,qBAAD,CAA5B;;AACA,MAAM;EAAEY;AAAF,IAA8BZ,OAAO,CAAC,kBAAD,CAA3C;;AACA,MAAMa,MAAM,GAAGb,OAAO,CAAC,cAAD,CAAtB;;AAEAc,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBE,KAA3B;;AACA,SAASA,KAAT,CAAgBC,WAAhB,EAA6BC,GAA7B,EAAkCC,aAAlC,EAAiD;EAC/CF,WAAW,GAAGA,WAAW,IAAI,EAA7B,CAD+C,CACf;;EAEhC,MAAMG,IAAI,GAAG,EAAb;EACA,IAAIC,OAAO,GAAG,IAAd;EACA,IAAIC,UAAU,GAAG,IAAjB;EACA,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIC,gBAAgB,GAAG,EAAvB;EACA,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIC,eAAe,GAAG,EAAtB;EACA,IAAIC,KAAK,GAAG,IAAZ;EACA,IAAIC,UAAU,GAAG,IAAjB;EAEA,MAAMC,IAAI,GAAGrB,IAAI,CAAC;IAChBsB,SAAS,EAAEzB,IAAI,CAAC0B,OAAL,CAAaC,SAAb,EAAwB,WAAxB,CADK;IAEhBC,WAAW,EAAE;EAFG,CAAD,CAAjB;EAKAb,IAAI,CAACc,UAAL,GAAkBtB,uBAAuB,CAACY,gBAAD,EAAmBJ,IAAnB,CAAzC;EAEA,IAAI,CAACF,GAAL,EAAUA,GAAG,GAAGiB,OAAO,CAACjB,GAAR,EAAN;;EAEVE,IAAI,CAACgB,UAAL,GAAkB,UAAUA,UAAV,EAAsB;IACtChB,IAAI,CAACiB,gBAAL,GAAwB,IAAxB;IACAjB,IAAI,CAACkB,EAAL,GAAUF,UAAV;IACA,OAAOhB,IAAP;EACD,CAJD,CAtB+C,CA4B/C;EACA;;;EACA,IAAI,kCAAkCmB,IAAlC,CAAuCJ,OAAO,CAACK,IAAR,CAAa,CAAb,CAAvC,CAAJ,EAA6D;IAC3DpB,IAAI,CAACkB,EAAL,GAAUH,OAAO,CAACK,IAAR,CAAaC,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,CAAV;EACD,CAFD,MAEO;IACLrB,IAAI,CAACkB,EAAL,GAAUH,OAAO,CAACK,IAAR,CAAaC,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,CAAV;EACD;;EAEDrB,IAAI,CAACkB,EAAL,GAAUlB,IAAI,CAACkB,EAAL,CACPI,GADO,CACH,CAACC,CAAD,EAAIC,CAAJ,KAAU;IACb,MAAMC,CAAC,GAAGC,MAAM,CAAC5B,GAAD,EAAMyB,CAAN,CAAhB;IACA,OAAOA,CAAC,CAACI,KAAF,CAAQ,sBAAR,KAAmCF,CAAC,CAACG,MAAF,GAAWL,CAAC,CAACK,MAAhD,GAAyDH,CAAzD,GAA6DF,CAApE;EACD,CAJO,EAKPM,IALO,CAKF,GALE,EAKGC,IALH,EAAV;;EAOA,IAAIf,OAAO,CAACgB,GAAR,CAAYC,CAAZ,KAAkBC,SAAlB,IAA+BlB,OAAO,CAACK,IAAR,CAAa,CAAb,MAAoBL,OAAO,CAACgB,GAAR,CAAYC,CAAnE,EAAsE;IACpEhC,IAAI,CAACkB,EAAL,GAAUH,OAAO,CAACgB,GAAR,CAAYC,CAAZ,CAAcE,OAAd,CACP,GAAEjD,IAAI,CAACkD,OAAL,CAAapB,OAAO,CAACqB,QAArB,CAA+B,GAD1B,EAC8B,EAD9B,CAAV;EAGD,CA/C8C,CAiD/C;EACA;;;EACA,MAAMC,OAAO,GAAG;IAAEC,MAAM,EAAE,CAAC,CAAX;IAAcC,QAAQ,EAAE,EAAxB;IAA4BC,YAAY,EAAE,EAA1C;IAA8CC,KAAK,EAAE;EAArD,CAAhB;;EACAzC,IAAI,CAAC0C,UAAL,GAAkB,MAAML,OAAxB,CApD+C,CAsD/C;EACA;EACA;;;EACA,IAAIM,OAAJ;;EACA3C,IAAI,CAAC4C,YAAL,GAAoB5C,IAAI,CAAC6C,KAAL,GAAa,SAASD,YAAT,CAAuBE,OAAvB,EAAgC;IAC/DT,OAAO,CAACC,MAAR;IACAQ,OAAO,GAAGA,OAAO,IAAI,EAArB;IACAH,OAAO,GAAGA,OAAO,IAAI,EAArB,CAH+D,CAI/D;IACA;IACA;;IACA,MAAMI,UAAU,GAAG,EAAnB;IACAA,UAAU,CAACC,KAAX,GAAmBL,OAAO,CAACK,KAAR,GAAgBL,OAAO,CAACK,KAAxB,GAAgC,EAAnD;IACAD,UAAU,CAACE,aAAX,GAA2BN,OAAO,CAACM,aAAR,GAAwBN,OAAO,CAACM,aAAhC,GAAgD,EAA3E,CAT+D,CAW/D;IACA;;IACA,MAAMC,WAAW,GAAG,EAApB;IACAH,UAAU,CAACC,KAAX,CAAiBG,OAAjB,CAA0BC,CAAD,IAAO;MAC9BF,WAAW,CAACE,CAAD,CAAX,GAAiB,IAAjB;MACC,CAACN,OAAO,CAACM,CAAD,CAAP,IAAc,EAAf,EAAmBD,OAAnB,CAA4BE,CAAD,IAAO;QACjCH,WAAW,CAACG,CAAD,CAAX,GAAiB,IAAjB;MACD,CAFA;IAGF,CALD,EAd+D,CAqB/D;;IACAC,MAAM,CAACC,MAAP,CACEjD,eADF,EAEEgD,MAAM,CAACE,IAAP,CAAYrD,MAAZ,EAAoBsD,MAApB,CAA2B,CAACC,GAAD,EAAMC,SAAN,KAAoB;MAC7C,MAAMH,IAAI,GAAGrD,MAAM,CAACwD,SAAD,CAAN,CAAkBC,MAAlB,CAAyBC,GAAG,IAAI,EAAEA,GAAG,IAAIX,WAAT,CAAhC,CAAb;;MACA,IAAIM,IAAI,CAAC5B,MAAL,GAAc,CAAlB,EAAqB;QACnB8B,GAAG,CAACC,SAAD,CAAH,GAAiBH,IAAjB;MACD;;MACD,OAAOE,GAAP;IACD,CAND,EAMG,EANH,CAFF,EAtB+D,CAgC/D;;IACAvD,MAAM,GAAG,EAAT;IAEA,MAAM2D,YAAY,GAAG,CACnB,OADmB,EACV,SADU,EACC,QADD,EACW,gBADX,EAEnB,OAFmB,EAEV,WAFU,EAEG,QAFH,EAGnB,eAHmB,CAArB;IAMA,MAAMC,aAAa,GAAG,CACpB,MADoB,EACZ,KADY,EACL,OADK,EACI,SADJ,EACe,oBADf,EAEpB,QAFoB,EAEV,SAFU,EAEC,iBAFD,EAEoB,kBAFpB,EAEwC,QAFxC,CAAtB;IAKAD,YAAY,CAACX,OAAb,CAAsBa,CAAD,IAAO;MAC1BjB,UAAU,CAACiB,CAAD,CAAV,GAAgB,CAACrB,OAAO,CAACqB,CAAD,CAAP,IAAc,EAAf,EAAmBJ,MAAnB,CAA0BI,CAAC,IAAI,CAACd,WAAW,CAACc,CAAD,CAA3C,CAAhB;IACD,CAFD;IAIAD,aAAa,CAACZ,OAAd,CAAuBa,CAAD,IAAO;MAC3BjB,UAAU,CAACiB,CAAD,CAAV,GAAgB3E,SAAS,CAACsD,OAAO,CAACqB,CAAD,CAAR,EAAa,CAACA,CAAD,EAAIC,CAAJ,KAAU,CAACf,WAAW,CAACc,CAAD,CAAnC,CAAzB;IACD,CAFD;IAIAjB,UAAU,CAACmB,SAAX,GAAuBvB,OAAO,CAACuB,SAA/B;IACAvB,OAAO,GAAGI,UAAV,CAvD+D,CAyD/D;IACA;;IACAxC,KAAK,GAAGA,KAAK,GAAGA,KAAK,CAACsC,KAAN,CAAYK,WAAZ,CAAH,GAA8BhE,KAAK,CAACc,IAAD,EAAOS,IAAP,CAAhD;IACAD,UAAU,GAAGA,UAAU,GAAGA,UAAU,CAACqC,KAAX,CAAiBK,WAAjB,CAAH,GAAmC/D,UAAU,CAACa,IAAD,EAAOO,KAAP,EAAcE,IAAd,CAApE;IACAR,OAAO,GAAGA,OAAO,GAAGA,OAAO,CAAC4C,KAAR,EAAH,GAAqB/D,OAAO,CAACkB,IAAD,EAAOO,KAAP,EAAcC,UAAd,EAA0BJ,gBAA1B,CAA7C;IACA,IAAI,CAACF,UAAL,EAAiBA,UAAU,GAAGnB,UAAU,CAACiB,IAAD,EAAOO,KAAP,EAAcN,OAAd,CAAvB;IAEjBkE,iBAAiB,GAAG,IAApB;IACA9D,MAAM,GAAG,EAAT;IACA+D,SAAS,GAAG,IAAZ;IACAC,SAAS,GAAG,KAAZ;IACArE,IAAI,CAACsE,MAAL,GAAc,KAAd;IAEA,OAAOtE,IAAP;EACD,CAvED;;EAwEAA,IAAI,CAAC4C,YAAL,GAlI+C,CAoI/C;;EACA,IAAI2B,OAAO,GAAG,EAAd;;EACA,SAASC,MAAT,GAAmB;IACjB,IAAIC,MAAM,GAAG,EAAb;IACAF,OAAO,CAACG,IAAR,CAAaD,MAAb;IACAA,MAAM,CAAC9B,OAAP,GAAiBA,OAAjB;IACA8B,MAAM,CAACxB,aAAP,GAAuBN,OAAO,CAACM,aAAR,CAAsB5B,KAAtB,CAA4B,CAA5B,CAAvB;IACAoD,MAAM,CAACE,WAAP,GAAqBA,WAArB;IACAF,MAAM,CAACtE,MAAP,GAAgBA,MAAhB;IACAI,KAAK,CAACiE,MAAN;IACAhE,UAAU,CAACgE,MAAX;IACAvE,OAAO,CAACuE,MAAR;IACAC,MAAM,CAACG,MAAP,GAAgBA,MAAhB;IACAH,MAAM,CAACN,iBAAP,GAA2BA,iBAA3B;IACAM,MAAM,CAACpE,MAAP,GAAgBA,MAAhB;IACAoE,MAAM,CAACL,SAAP,GAAmBA,SAAnB;IACAK,MAAM,CAACJ,SAAP,GAAmBA,SAAnB;IACAI,MAAM,CAACH,MAAP,GAAgBtE,IAAI,CAACsE,MAArB;IACAG,MAAM,CAACI,OAAP,GAAiBA,OAAjB;IACAJ,MAAM,CAACK,YAAP,GAAsBA,YAAtB;EACD;;EACD,SAASC,QAAT,GAAqB;IACnB,IAAIN,MAAM,GAAGF,OAAO,CAACS,GAAR,EAAb;IACArC,OAAO,GAAG8B,MAAM,CAAC9B,OAAjB;IACAA,OAAO,CAACM,aAAR,GAAwBwB,MAAM,CAACxB,aAA/B;IACA0B,WAAW,GAAGF,MAAM,CAACE,WAArB;IACAxE,MAAM,GAAGsE,MAAM,CAACtE,MAAhB;IACAE,MAAM,GAAGoE,MAAM,CAACpE,MAAhB;IACA+D,SAAS,GAAGK,MAAM,CAACL,SAAnB;IACAC,SAAS,GAAGI,MAAM,CAACJ,SAAnB;IACArE,IAAI,CAACsE,MAAL,GAAcG,MAAM,CAACH,MAArB;IACA/D,KAAK,CAACwE,QAAN;IACAvE,UAAU,CAACuE,QAAX;IACA9E,OAAO,CAAC8E,QAAR;IACAH,MAAM,GAAGH,MAAM,CAACG,MAAhB;IACAT,iBAAiB,GAAGM,MAAM,CAACN,iBAA3B;IACAU,OAAO,GAAGJ,MAAM,CAACI,OAAjB;IACAC,YAAY,GAAGL,MAAM,CAACK,YAAtB;EACD;;EAED9E,IAAI,CAACiF,OAAL,GAAe,UAAUzB,IAAV,EAAgB;IAC7B7E,OAAO,CAAC,gBAAD,EAAmB,CAAC6E,IAAD,CAAnB,EAA2B0B,SAAS,CAACtD,MAArC,CAAP;IACAuD,uBAAuB,CAAC,SAAD,EAAY3B,IAAZ,CAAvB;IACA,OAAOxD,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACoF,KAAL,GAAa,UAAU5B,IAAV,EAAgB;IAC3B7E,OAAO,CAAC,gBAAD,EAAmB,CAAC6E,IAAD,CAAnB,EAA2B0B,SAAS,CAACtD,MAArC,CAAP;IACAuD,uBAAuB,CAAC,OAAD,EAAU3B,IAAV,CAAvB;IACA,OAAOxD,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACqF,MAAL,GAAc,UAAU7B,IAAV,EAAgB;IAC5B7E,OAAO,CAAC,gBAAD,EAAmB,CAAC6E,IAAD,CAAnB,EAA2B0B,SAAS,CAACtD,MAArC,CAAP;IACAuD,uBAAuB,CAAC,QAAD,EAAW3B,IAAX,CAAvB;IACA,OAAOxD,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACsF,SAAL,GAAiB,UAAU9B,IAAV,EAAgB;IAC/B7E,OAAO,CAAC,gBAAD,EAAmB,CAAC6E,IAAD,CAAnB,EAA2B0B,SAAS,CAACtD,MAArC,CAAP;IACAuD,uBAAuB,CAAC,WAAD,EAAc3B,IAAd,CAAvB;IACA,OAAOxD,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACuF,KAAL,GAAa,UAAU/B,IAAV,EAAgB;IAC3B7E,OAAO,CAAC,gBAAD,EAAmB,CAAC6E,IAAD,CAAnB,EAA2B0B,SAAS,CAACtD,MAArC,CAAP;IACAuD,uBAAuB,CAAC,OAAD,EAAU3B,IAAV,CAAvB;IACA,OAAOxD,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACwF,MAAL,GAAc,UAAUhC,IAAV,EAAgB;IAC5B7E,OAAO,CAAC,gBAAD,EAAmB,CAAC6E,IAAD,CAAnB,EAA2B0B,SAAS,CAACtD,MAArC,CAAP;IACAuD,uBAAuB,CAAC,QAAD,EAAW3B,IAAX,CAAvB;IACA,OAAOxD,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACyF,WAAL,GAAmB,UAAUjC,IAAV,EAAgB;IACjC7E,OAAO,CAAC,gBAAD,EAAmB,CAAC6E,IAAD,CAAnB,EAA2B0B,SAAS,CAACtD,MAArC,CAAP;IACA8D,wBAAwB,CAAC1F,IAAI,CAAC2F,KAAN,EAAa,KAAb,EAAoB,MAApB,EAA4BnC,IAA5B,EAAkC,CAAlC,CAAxB;IACA,OAAOxD,IAAP;EACD,CAJD;;EAMAA,IAAI,CAAC4F,cAAL,GAAsB,UAAUpC,IAAV,EAAgB;IACpC7E,OAAO,CAAC,gBAAD,EAAmB,CAAC6E,IAAD,CAAnB,EAA2B0B,SAAS,CAACtD,MAArC,CAAP;IACAuD,uBAAuB,CAAC,gBAAD,EAAmB3B,IAAnB,CAAvB;IACA,OAAOxD,IAAP;EACD,CAJD;;EAMA,SAASmF,uBAAT,CAAkCU,IAAlC,EAAwCrC,IAAxC,EAA8CsC,KAA9C,EAAqD;IACnDtC,IAAI,GAAG,GAAGuC,MAAH,CAAUvC,IAAV,CAAP;IACAA,IAAI,CAACL,OAAL,CAAcU,GAAD,IAAS;MACpBA,GAAG,GAAGmC,WAAW,CAACnC,GAAD,CAAjB;MACAlB,OAAO,CAACkD,IAAD,CAAP,CAAcnB,IAAd,CAAmBb,GAAnB;IACD,CAHD;EAID;;EAED7D,IAAI,CAAC2F,KAAL,GAAa,UAAU9B,GAAV,EAAeiC,KAAf,EAAsB;IACjCnH,OAAO,CAAC,gCAAD,EAAmC,CAACkF,GAAD,EAAMiC,KAAN,CAAnC,EAAiDZ,SAAS,CAACtD,MAA3D,CAAP;IACA8D,wBAAwB,CAAC1F,IAAI,CAAC2F,KAAN,EAAa,KAAb,EAAoB,MAApB,EAA4B9B,GAA5B,EAAiCiC,KAAjC,CAAxB;IACA,OAAO9F,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACiG,OAAL,GAAe,UAAUpC,GAAV,EAAeiC,KAAf,EAAsB;IACnCnH,OAAO,CAAC,sCAAD,EAAyC,CAACkF,GAAD,EAAMiC,KAAN,CAAzC,EAAuDZ,SAAS,CAACtD,MAAjE,CAAP;IACA8D,wBAAwB,CAAC1F,IAAI,CAACiG,OAAN,EAAe,IAAf,EAAqB,SAArB,EAAgCpC,GAAhC,EAAqCiC,KAArC,CAAxB;IACA,OAAO9F,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACkG,KAAL,GAAa,UAAUrC,GAAV,EAAeiC,KAAf,EAAsB;IACjCnH,OAAO,CAAC,sCAAD,EAAyC,CAACkF,GAAD,EAAMiC,KAAN,CAAzC,EAAuDZ,SAAS,CAACtD,MAAjE,CAAP;IACA8D,wBAAwB,CAAC1F,IAAI,CAACkG,KAAN,EAAa,IAAb,EAAmB,OAAnB,EAA4BrC,GAA5B,EAAiCiC,KAAjC,CAAxB;IACA,OAAO9F,IAAP;EACD,CAJD,CAhP+C,CAsP/C;;;EACAA,IAAI,CAACmG,OAAL,GAAenG,IAAI,CAACoG,QAAL,GAAgB,UAAUvC,GAAV,EAAeiC,KAAf,EAAsBO,kBAAtB,EAA0C;IACvE1H,OAAO,CAAC,oCAAD,EAAuC,CAACkF,GAAD,EAAMiC,KAAN,EAAaO,kBAAb,CAAvC,EAAyEnB,SAAS,CAACtD,MAAnF,CAAP;IACA,IAAIyE,kBAAJ,EAAwB1D,OAAO,CAAC0D,kBAAR,CAA2BxC,GAA3B,IAAkCwC,kBAAlC;;IACxB,IAAI,OAAOP,KAAP,KAAiB,UAArB,EAAiC;MAC/B,IAAI,CAACnD,OAAO,CAAC0D,kBAAR,CAA2BxC,GAA3B,CAAL,EAAsClB,OAAO,CAAC0D,kBAAR,CAA2BxC,GAA3B,IAAkCtD,KAAK,CAAC+F,mBAAN,CAA0BR,KAA1B,CAAlC;MACtCA,KAAK,GAAGA,KAAK,CAACS,IAAN,EAAR;IACD;;IACDb,wBAAwB,CAAC1F,IAAI,CAACmG,OAAN,EAAe,KAAf,EAAsB,SAAtB,EAAiCtC,GAAjC,EAAsCiC,KAAtC,CAAxB;IACA,OAAO9F,IAAP;EACD,CATD;;EAWAA,IAAI,CAACwG,QAAL,GAAgB,UAAU3C,GAAV,EAAe4C,IAAf,EAAqB;IACnC9H,OAAO,CAAC,gCAAD,EAAmC,CAACkF,GAAD,EAAM4C,IAAN,CAAnC,EAAgDvB,SAAS,CAACtD,MAA1D,CAAP;IACA8D,wBAAwB,CAAC1F,IAAI,CAACwG,QAAN,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B3C,GAA9B,EAAmC,IAAnC,CAAxB;IACAtD,KAAK,CAACiG,QAAN,CAAe3C,GAAf,EAAoB4C,IAApB;IACA,OAAOzG,IAAP;EACD,CALD;;EAOAA,IAAI,CAAC0G,YAAL,GAAoB,UAAUlD,IAAV,EAAgBmD,GAAhB,EAAqB;IACvChI,OAAO,CAAC,gCAAD,EAAmC,CAAC6E,IAAD,EAAOmD,GAAP,CAAnC,EAAgDzB,SAAS,CAACtD,MAA1D,CAAP;IACA8D,wBAAwB,CAAC1F,IAAI,CAAC0G,YAAN,EAAoB,KAApB,EAA2B,iBAA3B,EAA8ClD,IAA9C,EAAoDmD,GAApD,CAAxB;IACA,OAAO3G,IAAP;EACD,CAJD;;EAMAA,IAAI,CAAC4G,MAAL,GAAc,UAAUpD,IAAV,EAAgBsC,KAAhB,EAAuB;IACnCnH,OAAO,CAAC,kCAAD,EAAqC,CAAC6E,IAAD,EAAOsC,KAAP,CAArC,EAAoDZ,SAAS,CAACtD,MAA9D,CAAP;IACA8D,wBAAwB,CAAC1F,IAAI,CAAC4G,MAAN,EAAc,KAAd,EAAqB,QAArB,EAA+BpD,IAA/B,EAAqCsC,KAArC,CAAxB;IACA,OAAO9F,IAAP;EACD,CAJD;;EAMA,SAAS0F,wBAAT,CAAmCmB,OAAnC,EAA4CC,OAA5C,EAAqDjB,IAArD,EAA2DhC,GAA3D,EAAgEiC,KAAhE,EAAuE;IACrE,IAAIiB,KAAK,CAACD,OAAN,CAAcjD,GAAd,CAAJ,EAAwB;MACtB,MAAMmD,IAAI,GAAG1D,MAAM,CAAC2D,MAAP,CAAc,IAAd,CAAb,CADsB,CAEtB;;MACApD,GAAG,CAACV,OAAJ,CAAaa,CAAD,IAAO;QACjBgD,IAAI,CAAChD,CAAD,CAAJ,GAAU8B,KAAV;MACD,CAFD;MAGAe,OAAO,CAACG,IAAD,CAAP;IACD,CAPD,MAOO,IAAI,OAAOnD,GAAP,KAAe,QAAnB,EAA6B;MAClC;MACAP,MAAM,CAACE,IAAP,CAAYK,GAAZ,EAAiBV,OAAjB,CAA0Ba,CAAD,IAAO;QAC9B6C,OAAO,CAAC7C,CAAD,EAAIH,GAAG,CAACG,CAAD,CAAP,CAAP;MACD,CAFD;IAGD,CALM,MAKA;MACLH,GAAG,GAAGmC,WAAW,CAACnC,GAAD,CAAjB,CADK,CAEL;;MACA,IAAIiD,OAAJ,EAAa;QACXnE,OAAO,CAACkD,IAAD,CAAP,CAAchC,GAAd,IAAqB,CAAClB,OAAO,CAACkD,IAAD,CAAP,CAAchC,GAAd,KAAsB,EAAvB,EAA2BkC,MAA3B,CAAkCD,KAAlC,CAArB;MACD,CAFD,MAEO;QACLnD,OAAO,CAACkD,IAAD,CAAP,CAAchC,GAAd,IAAqBiC,KAArB;MACD;IACF;EACF,CA3S8C,CA6S/C;EACA;;;EACA,SAASE,WAAT,CAAsBnC,GAAtB,EAA2B;IACzB,IAAIA,GAAG,KAAK,WAAZ,EAAyB,OAAO,aAAP;IACzB,OAAOA,GAAP;EACD;;EAED,SAASqD,0BAAT,CAAqCC,SAArC,EAAgD;IAC9C;IACA;IACA7D,MAAM,CAACE,IAAP,CAAYb,OAAZ,EAAqBQ,OAArB,CAA8BiE,OAAD,IAAa;MACxC,MAAMC,IAAI,GAAG1E,OAAO,CAACyE,OAAD,CAApB;;MACA,IAAIL,KAAK,CAACD,OAAN,CAAcO,IAAd,CAAJ,EAAyB;QACvB,IAAI,CAACA,IAAI,CAACC,OAAL,CAAaH,SAAb,CAAL,EAA8BE,IAAI,CAACE,MAAL,CAAYF,IAAI,CAACC,OAAL,CAAaH,SAAb,CAAZ,EAAqC,CAArC;MAC/B,CAFD,MAEO,IAAI,OAAOE,IAAP,KAAgB,QAApB,EAA8B;QACnC,OAAOA,IAAI,CAACF,SAAD,CAAX;MACD;IACF,CAPD,EAH8C,CAW9C;;IACA,OAAO5G,KAAK,CAACiH,eAAN,GAAwBL,SAAxB,CAAP;EACD;;EAEDnH,IAAI,CAACyH,MAAL,GAAc,SAASA,MAAT,CAAiB5D,GAAjB,EAAsB8C,GAAtB,EAA2B9B,OAA3B,EAAoC;IAChDlG,OAAO,CAAC,8CAAD,EAAiD,CAACkF,GAAD,EAAM8C,GAAN,EAAW9B,OAAX,CAAjD,EAAsEK,SAAS,CAACtD,MAAhF,CAAP,CADgD,CAEhD;;IACA,IAAI,OAAOiC,GAAP,KAAe,QAAnB,EAA6B;MAC3BA,GAAG,GAAGtE,YAAY,CAACsE,GAAD,EAAM/D,GAAN,EAAWE,IAAI,CAAC0H,sBAAL,GAA8B,mBAA9B,CAAX,CAAlB;MACA/E,OAAO,CAACM,aAAR,GAAwB,CAACN,OAAO,CAACM,aAAR,IAAyB,EAA1B,EAA8B8C,MAA9B,CAAqClC,GAArC,CAAxB;MACA,OAAO7D,IAAP;IACD,CAP+C,CAShD;;;IACA,IAAI,OAAO2G,GAAP,KAAe,UAAnB,EAA+B;MAC7B9B,OAAO,GAAG8B,GAAV;MACAA,GAAG,GAAG,IAAN;IACD;;IAED9C,GAAG,GAAGA,GAAG,IAAI,QAAb;IACA7D,IAAI,CAACwG,QAAL,CAAc3C,GAAd,EAAmB8C,GAAG,IAAIpG,KAAK,CAACoH,eAAN,CAAsB,0BAAtB,CAA1B;IACC,CAACZ,KAAK,CAACD,OAAN,CAAcjD,GAAd,IAAqBA,GAArB,GAA2B,CAACA,GAAD,CAA5B,EAAmCV,OAAnC,CAA4Ca,CAAD,IAAO;MACjDrB,OAAO,CAAC8E,MAAR,CAAezD,CAAf,IAAoBa,OAAO,IAAI,IAA/B;IACD,CAFA;IAID,OAAO7E,IAAP;EACD,CAtBD;;EAwBAA,IAAI,CAAC4H,OAAL,GAAe,UAAUC,GAAV,EAAeC,WAAf,EAA4B;IACzCnJ,OAAO,CAAC,mBAAD,EAAsB,CAACkJ,GAAD,EAAMC,WAAN,CAAtB,EAA0C5C,SAAS,CAACtD,MAApD,CAAP;IACArB,KAAK,CAACqH,OAAN,CAAcC,GAAd,EAAmBC,WAAnB;IACA,OAAO9H,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACC,OAAL,GAAe,UAAU4H,GAAV,EAAeC,WAAf,EAA4BjB,OAA5B,EAAqCkB,OAArC,EAA8CC,WAA9C,EAA2D;IACxErJ,OAAO,CAAC,6EAAD,EAAgF,CAACkJ,GAAD,EAAMC,WAAN,EAAmBjB,OAAnB,EAA4BkB,OAA5B,EAAqCC,WAArC,CAAhF,EAAmI9C,SAAS,CAACtD,MAA7I,CAAP;IACA3B,OAAO,CAACgI,UAAR,CAAmBJ,GAAnB,EAAwBC,WAAxB,EAAqCjB,OAArC,EAA8CkB,OAA9C,EAAuDC,WAAvD;IACA,OAAOhI,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACkI,UAAL,GAAkB,UAAUC,GAAV,EAAeC,IAAf,EAAqB;IACrCzJ,OAAO,CAAC,mBAAD,EAAsB,CAACwJ,GAAD,EAAMC,IAAN,CAAtB,EAAmClD,SAAS,CAACtD,MAA7C,CAAP;IACA,MAAMyG,GAAG,GAAGtI,aAAa,IAAInB,OAA7B;IACAqB,OAAO,CAACqI,YAAR,CAAqBH,GAArB,EAA0BnI,IAAI,CAAC0C,UAAL,EAA1B,EAA6C2F,GAA7C,EAAkDzJ,OAAO,CAAC,iBAAD,CAAP,EAAlD,EAAgFwJ,IAAhF;IACA,OAAOpI,IAAP;EACD,CALD,CAvW+C,CA8W/C;EACA;;;EACAA,IAAI,CAACuI,MAAL,GAAcvI,IAAI,CAACwI,QAAL,GAAgBxI,IAAI,CAACpB,OAAL,GAAe,SAAS2J,MAAT,CAAiB/E,IAAjB,EAAuBiF,GAAvB,EAA4B9B,GAA5B,EAAiC;IAC5E;IACA;IACA;IACA,IAAII,KAAK,CAACD,OAAN,CAAc2B,GAAd,CAAJ,EAAwB;MACtBA,GAAG,CAACtF,OAAJ,CAAaU,GAAD,IAAS;QACnB7D,IAAI,CAAC0G,YAAL,CAAkB7C,GAAlB,EAAuB8C,GAAvB;MACD,CAFD;MAGA8B,GAAG,GAAGC,QAAN;IACD,CALD,MAKO,IAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;MAClC9B,GAAG,GAAG8B,GAAN;MACAA,GAAG,GAAGC,QAAN;IACD;;IAED,IAAI,OAAOlF,IAAP,KAAgB,QAApB,EAA8B;MAC5BxD,IAAI,CAAC2I,aAAL,CAAmBnF,IAAnB,EAAyBiF,GAAzB,EAA8B9B,GAA9B,EAAmCA,GAAnC;IACD,CAFD,MAEO,IAAII,KAAK,CAACD,OAAN,CAActD,IAAd,CAAJ,EAAyB;MAC9BA,IAAI,CAACL,OAAL,CAAcU,GAAD,IAAS;QACpB7D,IAAI,CAAC0G,YAAL,CAAkB7C,GAAlB,EAAuB8C,GAAvB;MACD,CAFD;IAGD,CAJM,MAIA;MACL,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;QAC3B3G,IAAI,CAAC0G,YAAL,CAAkBlD,IAAlB,EAAwBmD,GAAxB;MACD,CAFD,MAEO,IAAIA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,WAAnC,EAAgD;QACrD3G,IAAI,CAAC0G,YAAL,CAAkBlD,IAAlB;MACD;IACF;;IAED,OAAOxD,IAAP;EACD,CA7BD;;EA+BAA,IAAI,CAAC2I,aAAL,GAAqB,SAASA,aAAT,CAAwBC,GAAxB,EAA6BH,GAA7B,EAAkCI,MAAlC,EAA0CC,MAA1C,EAAkD;IACrEnK,OAAO,CAAC,0EAAD,EAA6E,CAACiK,GAAD,EAAMH,GAAN,EAAWI,MAAX,EAAmBC,MAAnB,CAA7E,EAAyG5D,SAAS,CAACtD,MAAnH,CAAP;IAEA,IAAI,OAAOgH,GAAP,KAAe,WAAnB,EAAgCA,GAAG,GAAG,CAAN;;IAEhC,IAAI,OAAOH,GAAP,KAAe,QAAnB,EAA6B;MAC3BI,MAAM,GAAGJ,GAAT;MACAA,GAAG,GAAGC,QAAN;IACD;;IAED1I,IAAI,CAAC+I,MAAL,CAAY,GAAZ,EAAiB,KAAjB;IAEApG,OAAO,CAACqG,gBAAR,CAAyBhH,CAAzB,GAA6B;MAC3B4G,GAD2B;MAE3BH,GAF2B;MAG3BI,MAH2B;MAI3BC;IAJ2B,CAA7B;IAOA,OAAO9I,IAAP;EACD,CApBD;;EAsBAA,IAAI,CAACiJ,kBAAL,GAA0B,MAAM;IAC9BtK,OAAO,CAAC,EAAD,EAAK,CAAL,CAAP;IACA,OAAOgE,OAAO,CAACuG,eAAf;EACD,CAHD;;EAKAlJ,IAAI,CAACmJ,mBAAL,GAA2B,MAAM;IAC/BxK,OAAO,CAAC,EAAD,EAAK,CAAL,CAAP;IACA,OAAOgE,OAAO,CAACqG,gBAAf;EACD,CAHD;;EAKAhJ,IAAI,CAACoJ,OAAL,GAAe,UAAUvF,GAAV,EAAeiC,KAAf,EAAsB;IACnCnH,OAAO,CAAC,uCAAD,EAA0C,CAACkF,GAAD,EAAMiC,KAAN,CAA1C,EAAwDZ,SAAS,CAACtD,MAAlE,CAAP;IACApB,UAAU,CAAC4I,OAAX,CAAmBvF,GAAnB,EAAwBiC,KAAxB;IACA,OAAO9F,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACqJ,SAAL,GAAiB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;IACrC5K,OAAO,CAAC,gCAAD,EAAmC,CAAC2K,IAAD,EAAOC,IAAP,CAAnC,EAAiDrE,SAAS,CAACtD,MAA3D,CAAP;IACApB,UAAU,CAAC6I,SAAX,CAAqBC,IAArB,EAA2BC,IAA3B;IACA,OAAOvJ,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACO,KAAL,GAAa,UAAUoG,GAAV,EAAemB,WAAf,EAA4BjB,OAA5B,EAAqCkB,OAArC,EAA8C;IACzDpJ,OAAO,CAAC,uEAAD,EAA0E,CAACgI,GAAD,EAAMmB,WAAN,EAAmBjB,OAAnB,EAA4BkB,OAA5B,CAA1E,EAAgH7C,SAAS,CAACtD,MAA1H,CAAP;;IAEA,IAAIkG,WAAW,KAAK7F,SAApB,EAA+B;MAC7B;MACA;MACA,IAAI,CAAC0E,GAAG,IAAI,EAAR,EAAYhF,KAAZ,CAAkB,WAAlB,CAAJ,EAAoC;QAClC,OAAO3B,IAAI,CAACC,OAAL,CAAa0G,GAAb,EAAkBmB,WAAlB,EAA+BjB,OAA/B,EAAwCkB,OAAxC,CAAP;MACD,CAFD,MAEO;QACL,MAAM,IAAItI,MAAJ,CAAW,+EAAX,CAAN;MACD;IACF,CARD,MAQO;MACLc,KAAK,CAACA,KAAN,CAAYoG,GAAZ;MACA,OAAO3G,IAAP;IACD;EACF,CAfD;;EAiBAA,IAAI,CAACwJ,QAAL,GAAgBxJ,IAAI,CAACyJ,MAAL,GAAc,UAAU9C,GAAV,EAAe;IAC3ChI,OAAO,CAAC,UAAD,EAAa,CAACgI,GAAD,CAAb,EAAoBzB,SAAS,CAACtD,MAA9B,CAAP;IACArB,KAAK,CAACkJ,MAAN,CAAa9C,GAAb;IACA,OAAO3G,IAAP;EACD,CAJD;;EAMAA,IAAI,CAAC0J,IAAL,GAAY,UAAUC,CAAV,EAAa;IACvBhL,OAAO,CAAC,YAAD,EAAe,CAACgL,CAAD,CAAf,EAAoBzE,SAAS,CAACtD,MAA9B,CAAP;IACArB,KAAK,CAACqJ,MAAN,CAAaD,CAAb;IACA,OAAO3J,IAAP;EACD,CAJD;;EAMAA,IAAI,CAAC6J,KAAL,GAAa,UAAUF,CAAV,EAAaG,OAAb,EAAsB;IACjCnL,OAAO,CAAC,sBAAD,EAAyB,CAACgL,CAAD,EAAIG,OAAJ,CAAzB,EAAuC5E,SAAS,CAACtD,MAAjD,CAAP;IACApB,UAAU,CAACqJ,KAAX,CAAiBF,CAAjB,EAAoBG,OAAO,KAAK,KAAhC;IACA,OAAO9J,IAAP;EACD,CAJD;;EAMAA,IAAI,CAAC+I,MAAL,GAAc,SAASA,MAAT,CAAiBgB,OAAjB,EAA0BhB,MAA1B,EAAkC;IAC9CpK,OAAO,CAAC,0BAAD,EAA6B,CAACoL,OAAD,EAAUhB,MAAV,CAA7B,EAAgD7D,SAAS,CAACtD,MAA1D,CAAP;IACAmI,OAAO,GAAG,GAAGhE,MAAH,CAAUgE,OAAV,CAAV;;IACA,IAAIhB,MAAM,KAAK,KAAf,EAAsB;MACpBpG,OAAO,CAACK,KAAR,GAAgBL,OAAO,CAACK,KAAR,CAAcY,MAAd,CAAqBR,CAAC,IAAI2G,OAAO,CAACzC,OAAR,CAAgBlE,CAAhB,MAAuB,CAAC,CAAlD,CAAhB;IACD,CAFD,MAEO;MACL2G,OAAO,CAAC5G,OAAR,CAAiB6G,CAAD,IAAO;QACrB,IAAIrH,OAAO,CAACK,KAAR,CAAcsE,OAAd,CAAsB0C,CAAtB,MAA6B,CAAC,CAAlC,EAAqCrH,OAAO,CAACK,KAAR,CAAc0B,IAAd,CAAmBsF,CAAnB;MACtC,CAFD;IAGD;;IACD,OAAOhK,IAAP;EACD,CAXD;;EAaAA,IAAI,CAACiK,OAAL,GAAe,SAASA,OAAT,CAAkBpG,GAAlB,EAAuBqG,QAAvB,EAAiC;IAC9CvL,OAAO,CAAC,mBAAD,EAAsB,CAACkF,GAAD,EAAMqG,QAAN,CAAtB,EAAuChF,SAAS,CAACtD,MAAjD,CAAP;IACA,IAAIuI,IAAI,GAAG,IAAX,CAF8C,CAG9C;IACA;IACA;;IACA,MAAMC,GAAG,GAAGC,KAAK,CAACH,QAAQ,IAAIpK,GAAb,CAAjB,CAN8C,CAQ9C;;IACA,IAAIsK,GAAG,CAACvG,GAAD,CAAH,IAAY,OAAOuG,GAAG,CAACvG,GAAD,CAAV,KAAoB,QAApC,EAA8C;MAC5CsG,IAAI,GAAG5K,YAAY,CAAC6K,GAAG,CAACvG,GAAD,CAAJ,EAAWqG,QAAQ,IAAIpK,GAAvB,EAA4BE,IAAI,CAAC0H,sBAAL,GAA8B,mBAA9B,CAA5B,CAAnB;MACA/E,OAAO,CAACM,aAAR,GAAwB,CAACN,OAAO,CAACM,aAAR,IAAyB,EAA1B,EAA8B8C,MAA9B,CAAqCoE,IAArC,CAAxB;IACD;;IAED,OAAOnK,IAAP;EACD,CAfD;;EAiBA,MAAMsK,IAAI,GAAG,EAAb;;EACA,SAASD,KAAT,CAAgBH,QAAhB,EAA0B;IACxB,MAAMK,KAAK,GAAGL,QAAQ,IAAI,GAA1B;IACA,IAAII,IAAI,CAACC,KAAD,CAAR,EAAiB,OAAOD,IAAI,CAACC,KAAD,CAAX;;IACjB,MAAMC,MAAM,GAAG5L,OAAO,CAAC,SAAD,CAAtB;;IAEA,IAAIwL,GAAG,GAAG,EAAV;;IACA,IAAI;MACF,IAAIK,QAAQ,GAAGP,QAAQ,IAAItL,OAAO,CAAC,uBAAD,CAAP,CAAiCmB,aAAa,IAAInB,OAAlD,CAA3B,CADE,CAGF;MACA;MACA;;;MACA,IAAI,CAACsL,QAAD,IAAajL,IAAI,CAACyL,OAAL,CAAaD,QAAb,CAAjB,EAAyC;QACvCA,QAAQ,GAAGxL,IAAI,CAACkD,OAAL,CAAasI,QAAb,CAAX;MACD;;MAED,MAAME,WAAW,GAAGH,MAAM,CAACI,IAAP,CAAY,cAAZ,EAA4B;QAC9C9K,GAAG,EAAE2K;MADyC,CAA5B,CAApB;MAGAL,GAAG,GAAGS,IAAI,CAACC,KAAL,CAAWjM,EAAE,CAACkM,YAAH,CAAgBJ,WAAhB,CAAX,CAAN;IACD,CAdD,CAcE,OAAOK,IAAP,EAAa,CAAE;;IAEjBV,IAAI,CAACC,KAAD,CAAJ,GAAcH,GAAG,IAAI,EAArB;IACA,OAAOE,IAAI,CAACC,KAAD,CAAX;EACD;;EAED,IAAI1F,OAAO,GAAG,IAAd;EACA,IAAIC,YAAY,GAAG,IAAnB;;EACA9E,IAAI,CAAC8K,KAAL,GAAa,SAASA,KAAT,CAAgBG,IAAhB,EAAsBC,YAAtB,EAAoCC,QAApC,EAA8C;IACzDxM,OAAO,CAAC,qDAAD,EAAwD,CAACsM,IAAD,EAAOC,YAAP,EAAqBC,QAArB,CAAxD,EAAwFjG,SAAS,CAACtD,MAAlG,CAAP;IACA4C,MAAM;;IACN,IAAI,OAAOyG,IAAP,KAAgB,WAApB,EAAiC;MAC/B,MAAM7J,IAAI,GAAGpB,IAAI,CAACoL,UAAL,CAAgBvL,WAAhB,CAAb;;MACA,MAAMwL,SAAS,GAAGrL,IAAI,CAACsE,MAAvB;MACAS,QAAQ,GAHuB,CAI/B;;MACA/E,IAAI,CAACsE,MAAL,GAAc+G,SAAd;MACA,OAAOjK,IAAP;IACD,CAVwD,CAYzD;IACA;;;IACA,IAAI,OAAO8J,YAAP,KAAwB,QAA5B,EAAsC;MACpCpG,YAAY,GAAGoG,YAAf;MACAA,YAAY,GAAGC,QAAf;IACD,CAjBwD,CAmBzD;IACA;IACA;;;IACA,IAAI,OAAOD,YAAP,KAAwB,UAA5B,EAAwC;MACtCrG,OAAO,GAAGqG,YAAV;MACAA,YAAY,GAAG,IAAf;IACD,CAzBwD,CA0BzD;IACA;;;IACA,IAAI,CAACA,YAAL,EAAmBrL,WAAW,GAAGoL,IAAd;IAEnB,IAAIpG,OAAJ,EAAaF,WAAW,GAAG,KAAd;;IAEb,MAAML,MAAM,GAAGtE,IAAI,CAACoL,UAAL,CAAgBH,IAAhB,EAAsBC,YAAtB,CAAf;;IACA,IAAIrG,OAAJ,EAAaA,OAAO,CAACT,SAAD,EAAYE,MAAZ,EAAoBjE,MAApB,CAAP;IACb0E,QAAQ;IAER,OAAOT,MAAP;EACD,CArCD;;EAuCAtE,IAAI,CAACsL,gBAAL,GAAwB,MAAMxG,YAAY,IAAI,EAA9C;;EAEA9E,IAAI,CAACuL,iBAAL,GAAyB,MAAM,CAAC,CAAC1G,OAAjC;;EAEA7E,IAAI,CAACwL,MAAL,GAAcxL,IAAI,CAAC2C,OAAL,GAAe,SAAS6I,MAAT,CAAiB3H,GAAjB,EAAsB4H,GAAtB,EAA2B;IACtD9M,OAAO,CAAC,0BAAD,EAA6B,CAACkF,GAAD,EAAM4H,GAAN,CAA7B,EAAyCvG,SAAS,CAACtD,MAAnD,CAAP;;IACA,IAAI,OAAOiC,GAAP,KAAe,QAAnB,EAA6B;MAC3BP,MAAM,CAACE,IAAP,CAAYK,GAAZ,EAAiBV,OAAjB,CAA0Ba,CAAD,IAAO;QAC9BhE,IAAI,CAAC2C,OAAL,CAAaqB,CAAb,EAAgBH,GAAG,CAACG,CAAD,CAAnB;MACD,CAFD;IAGD,CAJD,MAIO;MACL,IAAI,OAAOyH,GAAP,KAAe,QAAnB,EAA6B;QAC3BA,GAAG,GAAG,EAAN;MACD;;MAED9I,OAAO,CAACkB,GAAR,CAAYA,GAAZ,IAAmB,IAAnB,CALK,CAKmB;;MAExB,IAAI4H,GAAG,CAACvF,KAAR,EAAelG,IAAI,CAACkG,KAAL,CAAWrC,GAAX,EAAgB4H,GAAG,CAACvF,KAApB;MAEf,MAAMqC,MAAM,GAAGkD,GAAG,CAAClD,MAAJ,IAAckD,GAAG,CAACjD,QAAlB,IAA8BiD,GAAG,CAAC7M,OAAjD,CATK,CAWL;;MACA,IAAI2J,MAAJ,EAAY;QACVvI,IAAI,CAACuI,MAAL,CAAY1E,GAAZ,EAAiB0E,MAAjB;MACD;;MAED,IAAIkD,GAAG,CAAC/E,YAAR,EAAsB;QACpB1G,IAAI,CAAC0G,YAAL,CAAkB7C,GAAlB,EAAuB,OAAO4H,GAAG,CAAC/E,YAAX,KAA4B,QAA5B,GAAuC+E,GAAG,CAAC/E,YAA3C,GAA0DzE,SAAjF;MACD;;MAED,IAAI,eAAewJ,GAAnB,EAAwB;QACtBzL,IAAI,CAACqJ,SAAL,CAAexF,GAAf,EAAoB4H,GAAG,CAACpC,SAAxB;MACD;;MAED,IAAI,aAAaoC,GAAjB,EAAsB;QACpBzL,IAAI,CAACmG,OAAL,CAAatC,GAAb,EAAkB4H,GAAG,CAACtF,OAAtB;MACD;;MAED,IAAI,aAAasF,GAAjB,EAAsB;QACpBzL,IAAI,CAACoJ,OAAL,CAAavF,GAAb,EAAkB4H,GAAG,CAACrC,OAAtB;MACD;;MAED,IAAI,WAAWqC,GAAf,EAAoB;QAClBzL,IAAI,CAAC2F,KAAL,CAAW9B,GAAX,EAAgB4H,GAAG,CAAC9F,KAApB;MACD;;MAED,IAAI8F,GAAG,CAAChE,MAAR,EAAgB;QACdzH,IAAI,CAACyH,MAAL,CAAY5D,GAAZ,EAAiB4H,GAAG,CAACC,YAArB;MACD;;MAED,IAAID,GAAG,CAACnG,SAAR,EAAmB;QACjBtF,IAAI,CAACsF,SAAL,CAAezB,GAAf;MACD;;MAED,IAAI,aAAa4H,GAAjB,EAAsB;QACpBzL,IAAI,CAACiG,OAAL,CAAapC,GAAb,EAAkB4H,GAAG,CAACxF,OAAtB;MACD;;MAED,IAAI,YAAYwF,GAAhB,EAAqB;QACnBzL,IAAI,CAAC4G,MAAL,CAAY/C,GAAZ,EAAiB4H,GAAG,CAAC7E,MAArB;MACD;;MAED,IAAI,WAAW6E,GAAf,EAAoB;QAClBzL,IAAI,CAAC2L,KAAL,CAAW9H,GAAX,EAAgB4H,GAAG,CAACE,KAApB;MACD;;MAED,IAAIF,GAAG,CAACxG,OAAJ,IAAewG,GAAG,CAAC5F,IAAJ,KAAa,SAAhC,EAA2C;QACzC7F,IAAI,CAACiF,OAAL,CAAapB,GAAb;QACA,IAAI4H,GAAG,CAACvF,KAAR,EAAelG,IAAI,CAACiF,OAAL,CAAawG,GAAG,CAACvF,KAAjB;MAChB;;MAED,IAAIuF,GAAG,CAACrG,KAAJ,IAAaqG,GAAG,CAAC5F,IAAJ,KAAa,OAA9B,EAAuC;QACrC7F,IAAI,CAACoF,KAAL,CAAWvB,GAAX;QACA,IAAI4H,GAAG,CAACvF,KAAR,EAAelG,IAAI,CAACoF,KAAL,CAAWqG,GAAG,CAACvF,KAAf;MAChB;;MAED,IAAIuF,GAAG,CAACpG,MAAJ,IAAcoG,GAAG,CAAC5F,IAAJ,KAAa,QAA/B,EAAyC;QACvC7F,IAAI,CAACqF,MAAL,CAAYxB,GAAZ;QACA,IAAI4H,GAAG,CAACvF,KAAR,EAAelG,IAAI,CAACqF,MAAL,CAAYoG,GAAG,CAACvF,KAAhB;MAChB;;MAED,IAAIuF,GAAG,CAACjG,MAAJ,IAAciG,GAAG,CAAC5F,IAAJ,KAAa,QAA/B,EAAyC;QACvC7F,IAAI,CAACwF,MAAL,CAAY3B,GAAZ;QACA,IAAI4H,GAAG,CAACvF,KAAR,EAAelG,IAAI,CAACwF,MAAL,CAAYiG,GAAG,CAACvF,KAAhB;MAChB;;MAED,IAAIuF,GAAG,CAAClG,KAAJ,IAAakG,GAAG,CAAC5F,IAAJ,KAAa,OAA9B,EAAuC;QACrC7F,IAAI,CAACuF,KAAL,CAAW1B,GAAX;MACD;;MAED,IAAI,OAAO4H,GAAG,CAAC1C,MAAX,KAAsB,SAA1B,EAAqC;QACnC/I,IAAI,CAAC+I,MAAL,CAAYlF,GAAZ,EAAiB4H,GAAG,CAAC1C,MAArB;MACD;;MAED,IAAI0C,GAAG,CAACpF,kBAAR,EAA4B;QAC1B1D,OAAO,CAAC0D,kBAAR,CAA2BxC,GAA3B,IAAkC4H,GAAG,CAACpF,kBAAtC;MACD;;MAED,IAAIoF,GAAG,CAAC7F,cAAR,EAAwB;QACtB5F,IAAI,CAAC4F,cAAL,CAAoB/B,GAApB;MACD;;MAED,MAAM4C,IAAI,GAAGgF,GAAG,CAACjF,QAAJ,IAAgBiF,GAAG,CAAC3D,WAApB,IAAmC2D,GAAG,CAAChF,IAApD;MACAzG,IAAI,CAACwG,QAAL,CAAc3C,GAAd,EAAmB4C,IAAnB;;MACA,IAAIgF,GAAG,CAACG,MAAR,EAAgB;QACd5L,IAAI,CAAC6L,IAAL,CAAUhI,GAAV;MACD;;MAED,IAAI4H,GAAG,CAAChG,WAAR,EAAqB;QACnBzF,IAAI,CAACyF,WAAL,CAAiB5B,GAAjB;MACD;IACF;;IAED,OAAO7D,IAAP;EACD,CA9GD;;EA+GAA,IAAI,CAAC8L,UAAL,GAAkB,MAAMnJ,OAAxB;;EAEA3C,IAAI,CAAC+L,UAAL,GAAkB,UAAUlI,GAAV,EAAeuE,IAAf,EAAqB;IACrCzJ,OAAO,CAAC,mBAAD,EAAsB,CAACkF,GAAD,EAAMuE,IAAN,CAAtB,EAAmClD,SAAS,CAACtD,MAA7C,CAAP;;IACA,IAAIS,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;MACxB,MAAM,IAAI7C,MAAJ,CAAW,kEAAX,CAAN;IACD,CAJoC,CAMrC;IACA;;;IACA,MAAMuM,aAAa,GAAG,CAAC,SAAD,EAAY,oBAAZ,EAAkC,SAAlC,EAA6C,WAA7C,EACpB,SADoB,EACT,WADS,EACI,QADJ,EACc,MADd,EACsB,UADtB,EAEpB,MAFoB,EAEZ,aAFY,EAEG,OAFH,CAAtB;IAGA5D,IAAI,GAAG/I,SAAS,CAAC+I,IAAD,EAAO,CAACpE,CAAD,EAAIC,CAAJ,KAAU;MAC/B,IAAIgI,MAAM,GAAGD,aAAa,CAAC1E,OAAd,CAAsBtD,CAAtB,MAA6B,CAAC,CAA3C,CAD+B,CAE/B;;MACA,IAAIA,CAAC,KAAK,MAAN,IAAgB,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgCsD,OAAhC,CAAwCrD,CAAxC,MAA+C,CAAC,CAApE,EAAuEgI,MAAM,GAAG,KAAT;MACvE,OAAOA,MAAP;IACD,CALe,CAAhB,CAXqC,CAkBrC;;IACA,MAAMC,WAAW,GAAG7J,OAAO,CAACG,YAAR,CAAqBH,OAAO,CAACG,YAAR,CAAqBZ,MAArB,GAA8B,CAAnD,CAApB;IACA,MAAMuK,YAAY,GAAGD,WAAW,GAAGjM,OAAO,CAACmM,iBAAR,CAA0BF,WAA1B,CAAH,GAA4C;MAC1E9G,KAAK,EAAE,EADmE;MAE1Ec,KAAK,EAAE,EAFmE;MAG1EC,OAAO,EAAE,EAHiE;MAI1EoC,MAAM,EAAE;IAJkE,CAA5E;IAMAjF,MAAM,CAACE,IAAP,CAAY2I,YAAZ,EAA0BhJ,OAA1B,CAAmCkJ,EAAD,IAAQ;MACxC,IAAItF,KAAK,CAACD,OAAN,CAAcqF,YAAY,CAACE,EAAD,CAA1B,CAAJ,EAAqC;QACnC,IAAIF,YAAY,CAACE,EAAD,CAAZ,CAAiB/E,OAAjB,CAAyBzD,GAAzB,MAAkC,CAAC,CAAvC,EAA0CuE,IAAI,CAACiE,EAAD,CAAJ,GAAW,IAAX;MAC3C,CAFD,MAEO;QACL,IAAIF,YAAY,CAACE,EAAD,CAAZ,CAAiBxI,GAAjB,KAAyB,EAAEwI,EAAE,IAAIjE,IAAR,CAA7B,EAA4CA,IAAI,CAACiE,EAAD,CAAJ,GAAWF,YAAY,CAACE,EAAD,CAAZ,CAAiBxI,GAAjB,CAAX;MAC7C;IACF,CAND;IAOA7D,IAAI,CAAC2L,KAAL,CAAW9H,GAAX,EAAgBtD,KAAK,CAAC+L,sBAAN,EAAhB;IACA,OAAOtM,IAAI,CAACwL,MAAL,CAAY3H,GAAZ,EAAiBuE,IAAjB,CAAP;EACD,CAnCD;;EAqCApI,IAAI,CAAC2L,KAAL,GAAa,SAASA,KAAT,CAAgBvD,IAAhB,EAAsBzE,SAAtB,EAAiC;IAC5ChF,OAAO,CAAC,yBAAD,EAA4B,CAACyJ,IAAD,EAAOzE,SAAP,CAA5B,EAA+CuB,SAAS,CAACtD,MAAzD,CAAP;IACA,MAAM2K,QAAQ,GAAGjM,eAAe,CAACqD,SAAD,CAAf,IAA8BxD,MAAM,CAACwD,SAAD,CAArD;;IACA,IAAIrD,eAAe,CAACqD,SAAD,CAAnB,EAAgC;MAC9B;MACA,OAAOrD,eAAe,CAACqD,SAAD,CAAtB;IACD;;IAED,MAAM6I,IAAI,GAAG,EAAb;IACArM,MAAM,CAACwD,SAAD,CAAN,GAAoB,CAAC4I,QAAQ,IAAI,EAAb,EAAiBxG,MAAjB,CAAwBqC,IAAxB,EAA8BxE,MAA9B,CAAsCC,GAAD,IAAS;MAChE,IAAI2I,IAAI,CAAC3I,GAAD,CAAR,EAAe,OAAO,KAAP;MACf,OAAQ2I,IAAI,CAAC3I,GAAD,CAAJ,GAAY,IAApB;IACD,CAHmB,CAApB;IAIA,OAAO7D,IAAP;EACD,CAdD,CA1tB+C,CAyuB/C;;;EACAA,IAAI,CAACyM,SAAL,GAAiB,MAAMnJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBpD,MAAlB,EAA0BG,eAA1B,CAAvB,CA1uB+C,CA4uB/C;EACA;;;EACAN,IAAI,CAAC+B,GAAL,GAAW,UAAU2K,MAAV,EAAkB;IAC3B/N,OAAO,CAAC,kBAAD,EAAqB,CAAC+N,MAAD,CAArB,EAA+BxH,SAAS,CAACtD,MAAzC,CAAP;IACA,IAAI8K,MAAM,KAAK,KAAf,EAAsB/J,OAAO,CAACuB,SAAR,GAAoBjC,SAApB,CAAtB,KACKU,OAAO,CAACuB,SAAR,GAAoBwI,MAAM,IAAI,EAA9B;IACL,OAAO1M,IAAP;EACD,CALD;;EAOAA,IAAI,CAAC2M,IAAL,GAAY,UAAUC,IAAV,EAAgB;IAC1BjO,OAAO,CAAC,yBAAD,EAA4B,CAACiO,IAAD,CAA5B,EAAoC1H,SAAS,CAACtD,MAA9C,CAAP;IACArB,KAAK,CAACoM,IAAN,CAAWC,IAAX;IACA,OAAO5M,IAAP;EACD,CAJD;;EAMA,IAAI4E,MAAM,GAAG,KAAb;;EACA5E,IAAI,CAAC4E,MAAL,GAAc,UAAUiI,OAAV,EAAmB;IAC/BlO,OAAO,CAAC,WAAD,EAAc,CAACkO,OAAD,CAAd,EAAyB3H,SAAS,CAACtD,MAAnC,CAAP;IACAgD,MAAM,GAAGiI,OAAO,KAAK,KAArB;IACA,OAAO7M,IAAP;EACD,CAJD;;EAKAA,IAAI,CAAC8M,SAAL,GAAiB,MAAMlI,MAAvB;;EAEA,IAAImI,YAAY,GAAG,EAAnB;;EACA/M,IAAI,CAACgN,mBAAL,GAA2B,SAASA,mBAAT,CAA8BvF,MAA9B,EAAsC;IAC/D9I,OAAO,CAAC,UAAD,EAAa,CAAC8I,MAAD,CAAb,EAAuBvC,SAAS,CAACtD,MAAjC,CAAP;IACAmL,YAAY,GAAGtF,MAAf;IACA,OAAOzH,IAAP;EACD,CAJD;;EAKAA,IAAI,CAAC0H,sBAAL,GAA8B,MAAMqF,YAApC;;EAEA/M,IAAI,CAACiN,QAAL,GAAgB,UAAUC,KAAV,EAAiB;IAC/BvO,OAAO,CAAC,mBAAD,EAAsB,CAACuO,KAAD,CAAtB,EAA+BhI,SAAS,CAACtD,MAAzC,CAAP;IACA,IAAI,CAAC5B,IAAI,CAACsE,MAAV,EAAkBtE,IAAI,CAACoL,UAAL,CAAgBvL,WAAhB,EAFa,CAEgB;;IAC/C,IAAII,OAAO,CAACkN,iBAAR,EAAJ,EAAiC;MAC/B9K,OAAO,CAACC,MAAR,GAD+B,CACd;;MACjBrC,OAAO,CAACmN,mBAAR,CAA4BpN,IAA5B,EAAkC,IAAlC;IACD;;IACDO,KAAK,CAAC0M,QAAN,CAAeC,KAAf;IACA,OAAOlN,IAAP;EACD,CATD;;EAWA,IAAIqN,UAAU,GAAG,IAAjB;;EACArN,IAAI,CAACsN,OAAL,GAAe,SAASA,OAAT,CAAkB7B,GAAlB,EAAuB9E,GAAvB,EAA4B4G,GAA5B,EAAiC;IAC9C,MAAMC,iBAAiB,GAAG,SAA1B;IACA7O,OAAO,CAAC,oCAAD,EAAuC,CAAC8M,GAAD,EAAM9E,GAAN,EAAW4G,GAAX,CAAvC,EAAwDrI,SAAS,CAACtD,MAAlE,CAAP,CAF8C,CAI9C;IACA;;IACA,IAAIyL,UAAJ,EAAgB;MACdnG,0BAA0B,CAACmG,UAAD,CAA1B;MACA9M,KAAK,CAAC+M,OAAN,CAAcrL,SAAd;MACAoL,UAAU,GAAG,IAAb;IACD;;IAED,IAAInI,SAAS,CAACtD,MAAV,KAAqB,CAAzB,EAA4B;MAC1B2L,GAAG,GAAGE,YAAY,EAAlB;MACAhC,GAAG,GAAG+B,iBAAN;IACD,CAHD,MAGO,IAAItI,SAAS,CAACtD,MAAV,KAAqB,CAAzB,EAA4B;MACjC,IAAI6J,GAAG,KAAK,KAAZ,EAAmB;QAAE;QACnB,OAAOzL,IAAP;MACD;;MACDuN,GAAG,GAAG9B,GAAN;MACAA,GAAG,GAAG+B,iBAAN;IACD,CANM,MAMA,IAAItI,SAAS,CAACtD,MAAV,KAAqB,CAAzB,EAA4B;MACjC2L,GAAG,GAAG5G,GAAN;MACAA,GAAG,GAAG,IAAN;IACD;;IAED0G,UAAU,GAAG,OAAO5B,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgC+B,iBAA7C;IACA7G,GAAG,GAAGA,GAAG,IAAIpG,KAAK,CAACoH,eAAN,CAAsB,qBAAtB,CAAb;IAEApH,KAAK,CAAC+M,OAAN,CAAcC,GAAG,IAAItL,SAArB;IACAjC,IAAI,CAACiF,OAAL,CAAaoI,UAAb;IACArN,IAAI,CAACwG,QAAL,CAAc6G,UAAd,EAA0B1G,GAA1B;IACA,OAAO3G,IAAP;EACD,CAjCD;;EAmCA,SAASyN,YAAT,GAAyB;IACvB,MAAMrD,GAAG,GAAGC,KAAK,EAAjB;IAEA,OAAOD,GAAG,CAACkD,OAAJ,IAAe,SAAtB;EACD;;EAED,IAAII,OAAO,GAAG,IAAd;;EACA1N,IAAI,CAAC2N,UAAL,GAAkB3N,IAAI,CAAC4N,IAAL,GAAY,SAASD,UAAT,CAAqBlC,GAArB,EAA0B9E,GAA1B,EAA+B;IAC3D,MAAMkH,cAAc,GAAG,MAAvB;IACAlP,OAAO,CAAC,2BAAD,EAA8B,CAAC8M,GAAD,EAAM9E,GAAN,CAA9B,EAA0CzB,SAAS,CAACtD,MAApD,CAAP,CAF2D,CAI3D;IACA;;IACA,IAAI8L,OAAJ,EAAa;MACXxG,0BAA0B,CAACwG,OAAD,CAA1B;MACAA,OAAO,GAAG,IAAV;IACD;;IAED,IAAIxI,SAAS,CAACtD,MAAV,KAAqB,CAAzB,EAA4B;MAC1B,IAAI6J,GAAG,KAAK,KAAZ,EAAmB,OAAOzL,IAAP;IACpB,CAb0D,CAe3D;;;IACA0N,OAAO,GAAG,OAAOjC,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCoC,cAA1C;IACA7N,IAAI,CAACiF,OAAL,CAAayI,OAAb;IACA1N,IAAI,CAACwG,QAAL,CAAckH,OAAd,EAAuB/G,GAAG,IAAIpG,KAAK,CAACoH,eAAN,CAAsB,WAAtB,CAA9B;IACA,OAAO3H,IAAP;EACD,CApBD;;EAsBA,MAAM8N,oBAAoB,GAAG,aAA7B;EACAnL,OAAO,CAACoL,aAAR,GAAwBD,oBAAxB;;EACA9N,IAAI,CAACgO,gBAAL,GAAwBhO,IAAI,CAACiO,UAAL,GAAkB,SAASD,gBAAT,CAA2BvC,GAA3B,EAAgC9E,GAAhC,EAAqC;IAC7EhI,OAAO,CAAC,2BAAD,EAA8B,CAAC8M,GAAD,EAAM9E,GAAN,CAA9B,EAA0CzB,SAAS,CAACtD,MAApD,CAAP;;IAEA,IAAIsD,SAAS,CAACtD,MAAV,KAAqB,CAAzB,EAA4B;MAC1B,IAAI6J,GAAG,KAAK,KAAZ,EAAmB,OAAOzL,IAAP;IACpB;;IAED,MAAM+N,aAAa,GAAG,OAAOtC,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCqC,oBAAtD;IACA9N,IAAI,CAACiF,OAAL,CAAa8I,aAAb;IACA/N,IAAI,CAACwG,QAAL,CAAcuH,aAAd,EAA6BpH,GAAG,IAAIpG,KAAK,CAACoH,eAAN,CAAsB,qBAAtB,CAApC;IACAhF,OAAO,CAACoL,aAAR,GAAwBA,aAAxB;IACA,OAAO/N,IAAP;EACD,CAZD;;EAcAA,IAAI,CAAC6L,IAAL,GAAY,SAASA,IAAT,CAAehI,GAAf,EAAoB;IAC9BlF,OAAO,CAAC,iBAAD,EAAoB,CAACkF,GAAD,CAApB,EAA2BqB,SAAS,CAACtD,MAArC,CAAP;IACAe,OAAO,CAACuL,aAAR,CAAsBxJ,IAAtB,CAA2Bb,GAA3B;IACA,OAAO7D,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACmO,cAAL,GAAsB,SAASA,cAAT,CAAyBtB,OAAzB,EAAkCuB,OAAlC,EAA2C;IAC/DzP,OAAO,CAAC,2BAAD,EAA8B,CAACkO,OAAD,EAAUuB,OAAV,CAA9B,EAAkDlJ,SAAS,CAACtD,MAA5D,CAAP;IACArB,KAAK,CAAC4N,cAAN,CAAqBtB,OAArB,EAA8BuB,OAA9B;IACA,OAAOpO,IAAP;EACD,CAJD;;EAMA,IAAI2E,WAAW,GAAG,IAAlB;;EACA3E,IAAI,CAAC2E,WAAL,GAAmB,UAAUkI,OAAV,EAAmB;IACpClO,OAAO,CAAC,WAAD,EAAc,CAACkO,OAAD,CAAd,EAAyB3H,SAAS,CAACtD,MAAnC,CAAP;;IACA,IAAI,OAAOiL,OAAP,KAAmB,SAAvB,EAAkC;MAChCA,OAAO,GAAG,IAAV;IACD;;IACDlI,WAAW,GAAGkI,OAAd;IACA,OAAO7M,IAAP;EACD,CAPD;;EAQAA,IAAI,CAACqO,cAAL,GAAsB,MAAM1J,WAA5B;;EAEA,IAAIR,iBAAiB,GAAG,IAAxB;;EACAnE,IAAI,CAACE,UAAL,GAAkB,UAAU2H,GAAV,EAAepB,IAAf,EAAqB6H,EAArB,EAAyB;IACzC3P,OAAO,CAAC,+CAAD,EAAkD,CAACkJ,GAAD,EAAMpB,IAAN,EAAY6H,EAAZ,CAAlD,EAAmEpJ,SAAS,CAACtD,MAA7E,CAAP,CADyC,CAGzC;IACA;IACA;;IACA,IAAI,OAAO6E,IAAP,KAAgB,UAApB,EAAgC;MAC9B6H,EAAE,GAAG7H,IAAL;MACAA,IAAI,GAAG,IAAP;IACD,CATwC,CAWzC;;;IACAtC,iBAAiB,GAAG0D,GAAG,IAAI1D,iBAAP,IAA4B,YAAhD;;IACA,IAAI,CAACsC,IAAD,IAASA,IAAI,KAAK,KAAtB,EAA6B;MAC3BA,IAAI,GAAG,4BAAP;IACD;;IACDzG,IAAI,CAACC,OAAL,CAAakE,iBAAb,EAAgCsC,IAAhC,EAhByC,CAkBzC;;IACA,IAAI6H,EAAJ,EAAQpO,UAAU,CAACqO,gBAAX,CAA4BD,EAA5B;IAER,OAAOtO,IAAP;EACD,CAtBD;;EAwBAA,IAAI,CAACwO,oBAAL,GAA4B,UAAUtN,EAAV,EAAc2G,GAAd,EAAmB;IAC7ClJ,OAAO,CAAC,mBAAD,EAAsB,CAACuC,EAAD,EAAK2G,GAAL,CAAtB,EAAiC3C,SAAS,CAACtD,MAA3C,CAAP;IACAV,EAAE,GAAGA,EAAE,IAAIlB,IAAI,CAACkB,EAAhB;;IACAuN,OAAO,CAACC,GAAR,CAAYxO,UAAU,CAACyO,wBAAX,CAAoCzN,EAApC,EAAwC2G,GAAG,IAAI1D,iBAAP,IAA4B,YAApE,CAAZ;;IACA,OAAOnE,IAAP;EACD,CALD;;EAOAA,IAAI,CAAC4O,aAAL,GAAqB,UAAU3D,IAAV,EAAgB4D,IAAhB,EAAsB;IACzClQ,OAAO,CAAC,oBAAD,EAAuB,CAACsM,IAAD,EAAO4D,IAAP,CAAvB,EAAqC3J,SAAS,CAACtD,MAA/C,CAAP;IACA1B,UAAU,CAAC0O,aAAX,CAAyB3D,IAAzB,EAA+B4D,IAA/B;EACD,CAHD;;EAKA7O,IAAI,CAAC8O,MAAL,GAAc,UAAUA,MAAV,EAAkB;IAC9BnQ,OAAO,CAAC,UAAD,EAAa,CAACmQ,MAAD,CAAb,EAAuB5J,SAAS,CAACtD,MAAjC,CAAP;;IACA,IAAIsD,SAAS,CAACtD,MAAV,KAAqB,CAAzB,EAA4B;MAC1BmN,WAAW;MACX,OAAOtO,IAAI,CAACuO,SAAL,EAAP;IACD;;IACDC,YAAY,GAAG,KAAf;IACAxO,IAAI,CAACyO,SAAL,CAAeJ,MAAf;IACA,OAAO9O,IAAP;EACD,CATD;;EAWAA,IAAI,CAACmP,aAAL,GAAqBnP,IAAI,CAACoP,YAAL,GAAoB,UAAUhF,GAAV,EAAe;IACtDzL,OAAO,CAAC,UAAD,EAAa,CAACyL,GAAD,CAAb,EAAoBlF,SAAS,CAACtD,MAA9B,CAAP;IACAqN,YAAY,GAAG,KAAf;IACAxO,IAAI,CAAC2O,YAAL,CAAkBhF,GAAlB;IACA,OAAOpK,IAAP;EACD,CALD;;EAOA,IAAIiP,YAAY,GAAG,IAAnB;;EACAjP,IAAI,CAACiP,YAAL,GAAoB,UAAUI,MAAV,EAAkB;IACpC1Q,OAAO,CAAC,WAAD,EAAc,CAAC0Q,MAAD,CAAd,EAAwBnK,SAAS,CAACtD,MAAlC,CAAP;IACAqN,YAAY,GAAGI,MAAf;IACA,OAAOrP,IAAP;EACD,CAJD;;EAKAA,IAAI,CAACsP,eAAL,GAAuB,MAAML,YAA7B;;EAEA,IAAI5K,SAAS,GAAG,KAAhB;EACA,IAAID,SAAS,GAAG,IAAhB,CA97B+C,CA+7B/C;EACA;;EACApE,IAAI,CAACuP,IAAL,GAAY,CAACC,IAAD,EAAOC,GAAP,KAAe;IACzBpL,SAAS,GAAG,IAAZ;IACAD,SAAS,GAAGqL,GAAZ;IACA,IAAI9K,WAAJ,EAAiB5D,OAAO,CAACwO,IAAR,CAAaC,IAAb;EAClB,CAJD,CAj8B+C,CAu8B/C;EACA;;;EACA,MAAMf,OAAO,GAAG;IACdC,GAAG,GAAI;MACL,MAAMzD,IAAI,GAAG,EAAb;;MACA,KAAK,IAAIzJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0D,SAAS,CAACtD,MAA9B,EAAsCJ,CAAC,EAAvC,EAA2CyJ,IAAI,CAACvG,IAAL,CAAUQ,SAAS,CAAC1D,CAAD,CAAnB;;MAC3C,IAAI,CAACxB,IAAI,CAACuL,iBAAL,EAAL,EAA+BmE,OAAO,CAAChB,GAAR,CAAYiB,KAAZ,CAAkBD,OAAlB,EAA2BzE,IAA3B;MAC/B5G,SAAS,GAAG,IAAZ;MACA,IAAIhE,MAAM,CAACuB,MAAX,EAAmBvB,MAAM,IAAI,IAAV;MACnBA,MAAM,IAAI4K,IAAI,CAACpJ,IAAL,CAAU,GAAV,CAAV;IACD,CARa;;IASd+N,KAAK,GAAI;MACP,MAAM3E,IAAI,GAAG,EAAb;;MACA,KAAK,IAAIzJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0D,SAAS,CAACtD,MAA9B,EAAsCJ,CAAC,EAAvC,EAA2CyJ,IAAI,CAACvG,IAAL,CAAUQ,SAAS,CAAC1D,CAAD,CAAnB;;MAC3C,IAAI,CAACxB,IAAI,CAACuL,iBAAL,EAAL,EAA+BmE,OAAO,CAACE,KAAR,CAAcD,KAAd,CAAoBD,OAApB,EAA6BzE,IAA7B;MAC/B5G,SAAS,GAAG,IAAZ;MACA,IAAIhE,MAAM,CAACuB,MAAX,EAAmBvB,MAAM,IAAI,IAAV;MACnBA,MAAM,IAAI4K,IAAI,CAACpJ,IAAL,CAAU,GAAV,CAAV;IACD;;EAhBa,CAAhB;;EAkBA7B,IAAI,CAAC6P,kBAAL,GAA0B,MAAMpB,OAAhC,CA39B+C,CA49B/C;EACA;;;EACAzO,IAAI,CAAC8P,UAAL,GAAkB,MAAMzL,SAAxB;;EAEArE,IAAI,CAAC+P,aAAL,GAAqB,MAAM;IACzB1L,SAAS,GAAG,IAAZ;EACD,CAFD;;EAIA,IAAI2L,iBAAJ;;EACAhQ,IAAI,CAACgQ,iBAAL,GAAyB,UAAUC,SAAV,EAAqB;IAC5CtR,OAAO,CAAC,WAAD,EAAc,CAACsR,SAAD,CAAd,EAA2B/K,SAAS,CAACtD,MAArC,CAAP;IACAoO,iBAAiB,GAAG,OAAOC,SAAP,KAAqB,SAArB,GAAiCA,SAAjC,GAA6C,IAAjE;IACA,OAAOjQ,IAAP;EACD,CAJD;;EAMAA,IAAI,CAACkQ,gBAAL,GAAwB,MAAM3P,KAA9B;;EAEAP,IAAI,CAACmQ,qBAAL,GAA6B,MAAM3P,UAAnC;;EAEAR,IAAI,CAACoQ,kBAAL,GAA0B,MAAMnQ,OAAhC;;EAEAD,IAAI,CAACqQ,aAAL,GAAqB,MAAM;IACzB1R,OAAO,CAAC,EAAD,EAAK,CAAL,CAAP;IACA,OAAO,OAAOoC,OAAO,CAACuP,MAAR,CAAeC,OAAtB,KAAkC,WAAlC,GAAgDxP,OAAO,CAACuP,MAAR,CAAeC,OAA/D,GAAyE,IAAhF;EACD,CAHD;;EAKAjN,MAAM,CAACkN,cAAP,CAAsBxQ,IAAtB,EAA4B,MAA5B,EAAoC;IAClCyQ,GAAG,EAAE,MAAMzQ,IAAI,CAACoL,UAAL,CAAgBvL,WAAhB,CADuB;IAElC6Q,UAAU,EAAE;EAFsB,CAApC;;EAKA1Q,IAAI,CAACoL,UAAL,GAAkB,SAASuF,SAAT,CAAoB1F,IAApB,EAA0BC,YAA1B,EAAwC0F,kBAAxC,EAA4DC,YAA5D,EAA0E;IAC1F,IAAIjL,cAAc,GAAG,CAAC,CAACgL,kBAAvB;IACA3F,IAAI,GAAGA,IAAI,IAAIpL,WAAf;IAEA8C,OAAO,CAACmO,EAAR,GAAarQ,IAAI,CAACqQ,EAAlB;IACAnO,OAAO,CAACoO,aAAR,GAAwB/Q,IAAI,CAAC0H,sBAAL,EAAxB,CAL0F,CAM1F;;IACA,IAAIsJ,SAAS,GAAG3G,KAAK,GAAG,OAAH,CAArB;;IACA,IAAI2G,SAAJ,EAAe;MACbtB,OAAO,CAACuB,IAAR,CAAa,oIAAb;MACAtO,OAAO,CAACoO,aAAR,GAAwBzN,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkByN,SAAlB,EAA6BrO,OAAO,CAACoO,aAArC,CAAxB;IACD;;IAED,MAAMG,kBAAkB,GAAG,CAAC,CAACvO,OAAO,CAACoO,aAAR,CAAsB,YAAtB,CAA7B;IACA,MAAMtJ,MAAM,GAAGnE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,OAAO,CAACoO,aAA1B,EAAyC;MACtD,cAAc;IADwC,CAAzC,CAAf;IAGA,MAAMzM,MAAM,GAAGtF,MAAM,CAACmS,QAAP,CAAgBlG,IAAhB,EAAsB3H,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,OAAlB,EAA2B;MAC9DoO,aAAa,EAAEtJ;IAD+C,CAA3B,CAAtB,CAAf;IAIA,IAAIrG,IAAI,GAAGkD,MAAM,CAAClD,IAAlB;IACA,IAAI0D,YAAJ,EAAkB1D,IAAI,GAAGkC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnC,IAAlB,EAAwB0D,YAAxB,CAAP;IAClB,MAAMhC,OAAO,GAAGwB,MAAM,CAACxB,OAAvB;IAEA1B,IAAI,CAACF,EAAL,GAAUlB,IAAI,CAACkB,EAAf;IACAlB,IAAI,CAACsE,MAAL,GAAcA,MAAd;;IAEA,IAAI;MACFyK,WAAW,GADT,CACY;MAEd;MACA;MACA;;MACA,IAAI7D,YAAJ,EAAkB;QAChB,OAAQgG,kBAAkB,IAAIN,kBAAvB,GAA6CxP,IAA7C,GAAoDpB,IAAI,CAACoR,eAAL,CAAqBhQ,IAArB,CAA3D;MACD,CARC,CAUF;MACA;;;MACA,IAAIsM,OAAJ,EAAa;QACX;QACA;QACA;QACA,MAAM2D,QAAQ,GAAG,CAAC3D,OAAD,EACd3H,MADc,CACPjD,OAAO,CAAC4K,OAAD,CAAP,IAAoB,EADb,EAEd9J,MAFc,CAEPI,CAAC,IAAIA,CAAC,CAACpC,MAAF,GAAW,CAFT,CAAjB,CAJW,CAOX;;QACA,IAAI,CAACyP,QAAQ,CAAC/J,OAAT,CAAiBlG,IAAI,CAACY,CAAL,CAAOZ,IAAI,CAACY,CAAL,CAAOJ,MAAP,GAAgB,CAAvB,CAAjB,CAAL,EAAkD;UAChDR,IAAI,CAACY,CAAL,CAAOgD,GAAP;;UACA5D,IAAI,CAACsM,OAAD,CAAJ,GAAgB,IAAhB;QACD;MACF;;MAED,MAAM4D,WAAW,GAAGrR,OAAO,CAACsR,WAAR,EAApB;MACA,MAAMC,kBAAkB,IAAGtR,UAAU,CAACuR,aAAX,IAA4BrQ,IAA/B,CAAxB;MACA,MAAMsQ,kBAAkB,GAAGtQ,IAAI,CAACsM,OAAD,CAAJ,IAAiB8D,kBAA5C;MACA,MAAMG,kBAAkB,GAAGD,kBAAkB,KAAKJ,WAAW,CAAC1P,MAAZ,GAAqB,CAArB,IAA0B0P,WAAW,CAAC,CAAD,CAAX,KAAmB,IAAlD,CAA7C;;MAEA,IAAIlQ,IAAI,CAACY,CAAL,CAAOJ,MAAX,EAAmB;QACjB,IAAI0P,WAAW,CAAC1P,MAAhB,EAAwB;UACtB,IAAIgQ,mBAAJ;;UACA,KAAK,IAAIpQ,CAAC,GAAIqP,YAAY,IAAI,CAAzB,EAA6BhJ,GAAlC,EAAuCzG,IAAI,CAACY,CAAL,CAAOR,CAAP,MAAcS,SAArD,EAAgET,CAAC,EAAjE,EAAqE;YACnEqG,GAAG,GAAGgK,MAAM,CAACzQ,IAAI,CAACY,CAAL,CAAOR,CAAP,CAAD,CAAZ;;YACA,IAAI,CAAC8P,WAAW,CAAChK,OAAZ,CAAoBO,GAApB,CAAD,IAA6BA,GAAG,KAAK1D,iBAAzC,EAA4D;cAC1D;cACA;cACA;cACA,MAAM2N,SAAS,GAAG7R,OAAO,CAAC8R,UAAR,CAAmBlK,GAAnB,EAAwB7H,IAAxB,EAA8BsE,MAA9B,EAAsC9C,CAAC,GAAG,CAA1C,CAAlB;cACA,OAAO0P,kBAAkB,GAAGY,SAAH,GAAe9R,IAAI,CAACoR,eAAL,CAAqBU,SAArB,CAAxC;YACD,CAND,MAMO,IAAI,CAACF,mBAAD,IAAwB/J,GAAG,KAAK1D,iBAApC,EAAuD;cAC5DyN,mBAAmB,GAAG/J,GAAtB;cACA;YACD;UACF,CAdqB,CAgBtB;;;UACA,IAAI5H,OAAO,CAACkN,iBAAR,MAA+B,CAACwE,kBAApC,EAAwD;YACtD,MAAMG,SAAS,GAAG7R,OAAO,CAAC8R,UAAR,CAAmB,IAAnB,EAAyB/R,IAAzB,EAA+BsE,MAA/B,CAAlB;YACA,OAAO4M,kBAAkB,GAAGY,SAAH,GAAe9R,IAAI,CAACoR,eAAL,CAAqBU,SAArB,CAAxC;UACD,CApBqB,CAsBtB;UACA;;;UACA,IAAI9B,iBAAiB,IAAI4B,mBAArB,IAA4C,CAACF,kBAAjD,EAAqE;YACnElR,UAAU,CAACwP,iBAAX,CAA6B4B,mBAA7B,EAAkDN,WAAlD;UACD;QACF,CA5BgB,CA8BjB;;;QACA,IAAInN,iBAAiB,IAAI,CAAC/C,IAAI,CAACY,CAAL,CAAOsF,OAAP,CAAenD,iBAAf,CAAtB,IAA2D,CAACqN,kBAAhE,EAAoF;UAClF,IAAI7M,WAAJ,EAAiBrF,WAAW,CAAC,IAAD,CAAX;UACjBU,IAAI,CAACwO,oBAAL;UACAxO,IAAI,CAACuP,IAAL,CAAU,CAAV;QACD;MACF,CApCD,MAoCO,IAAItP,OAAO,CAACkN,iBAAR,MAA+B,CAACwE,kBAApC,EAAwD;QAC7D,MAAMG,SAAS,GAAG7R,OAAO,CAAC8R,UAAR,CAAmB,IAAnB,EAAyB/R,IAAzB,EAA+BsE,MAA/B,CAAlB;QACA,OAAO4M,kBAAkB,GAAGY,SAAH,GAAe9R,IAAI,CAACoR,eAAL,CAAqBU,SAArB,CAAxC;MACD,CAtEC,CAwEF;MACA;;;MACA,IAAIN,kBAAJ,EAAwB;QACtB,IAAI7M,WAAJ,EAAiBrF,WAAW,CAAC,IAAD,CAAX,CADK,CAGtB;QACA;;QACA,MAAM0S,cAAc,GAAG/G,IAAI,CAAC5J,KAAL,CAAW4J,IAAI,CAAC3D,OAAL,CAAc,KAAIpH,UAAU,CAACuR,aAAc,EAA3C,IAAgD,CAA3D,CAAvB;QACAvR,UAAU,CAAC0O,aAAX,CAAyBoD,cAAzB,EAA0CC,WAAD,IAAiB;UACxD;UAAC,CAACA,WAAW,IAAI,EAAhB,EAAoB9O,OAApB,CAA6BjD,UAAD,IAAgB;YAC3CuO,OAAO,CAACC,GAAR,CAAYxO,UAAZ;UACD,CAFA;UAIDF,IAAI,CAACuP,IAAL,CAAU,CAAV;QACD,CAND;QAOA,OAAQ2B,kBAAkB,IAAIN,kBAAvB,GAA6CxP,IAA7C,GAAoDpB,IAAI,CAACoR,eAAL,CAAqBhQ,IAArB,CAA3D;MACD,CAxFC,CA0FF;MACA;;;MACA,IAAI,CAACiD,SAAL,EAAgB;QACdf,MAAM,CAACE,IAAP,CAAYpC,IAAZ,EAAkB+B,OAAlB,CAA2BU,GAAD,IAAS;UACjC,IAAIA,GAAG,KAAK6J,OAAR,IAAmBtM,IAAI,CAACyC,GAAD,CAA3B,EAAkC;YAChC,IAAIc,WAAJ,EAAiBrF,WAAW,CAAC,IAAD,CAAX;YAEjBsG,cAAc,GAAG,IAAjB;YACA5F,IAAI,CAACiN,QAAL,CAAc,KAAd;YACAjN,IAAI,CAACuP,IAAL,CAAU,CAAV;UACD,CAND,MAMO,IAAI1L,GAAG,KAAKwJ,UAAR,IAAsBjM,IAAI,CAACyC,GAAD,CAA9B,EAAqC;YAC1C,IAAIc,WAAJ,EAAiBrF,WAAW,CAAC,IAAD,CAAX;YAEjBsG,cAAc,GAAG,IAAjB;YACArF,KAAK,CAAC2R,WAAN;YACAlS,IAAI,CAACuP,IAAL,CAAU,CAAV;UACD;QACF,CAdD;MAeD,CA5GC,CA8GF;;;MACA,IAAI,CAAC3J,cAAD,IAAmBjD,OAAO,CAACiD,cAAR,CAAuBhE,MAAvB,GAAgC,CAAvD,EAA0D;QACxDgE,cAAc,GAAGtC,MAAM,CAACE,IAAP,CAAYpC,IAAZ,EAAkB+Q,IAAlB,CAAuBtO,GAAG,IAAIlB,OAAO,CAACiD,cAAR,CAAuB0B,OAAvB,CAA+BzD,GAA/B,KAAuC,CAAvC,IAA4CzC,IAAI,CAACyC,GAAD,CAAJ,KAAc,IAAxF,CAAjB;MACD,CAjHC,CAmHF;MACA;;;MACA,IAAI,CAAC+B,cAAL,EAAqB;QACnB,IAAItB,MAAM,CAACsL,KAAX,EAAkB,MAAM,IAAInQ,MAAJ,CAAW6E,MAAM,CAACsL,KAAP,CAAaxB,OAAxB,CAAN,CADC,CAGnB;QACA;;QACA,IAAI,CAACoD,kBAAL,EAAyB;UACvBxR,IAAI,CAACoS,cAAL,CAAoBhR,IAApB,EAA0B0B,OAA1B,EAAmC,EAAnC,EAAuCwB,MAAM,CAACsL,KAA9C;QACD;MACF;IACF,CA9HD,CA8HE,OAAOH,GAAP,EAAY;MACZ,IAAIA,GAAG,YAAYhQ,MAAnB,EAA2Bc,KAAK,CAACmJ,IAAN,CAAW+F,GAAG,CAACrB,OAAf,EAAwBqB,GAAxB,EAA3B,KACK,MAAMA,GAAN;IACN;;IAED,OAAQyB,kBAAkB,IAAIN,kBAAvB,GAA6CxP,IAA7C,GAAoDpB,IAAI,CAACoR,eAAL,CAAqBhQ,IAArB,CAA3D;EACD,CAhKD,CA3/B+C,CA6pC/C;EACA;EACA;;;EACApB,IAAI,CAACoR,eAAL,GAAuB,UAAUhQ,IAAV,EAAgB;IACrC,IAAI,CAACA,IAAI,CAACY,CAAN,IAAW,CAACZ,IAAI,CAAC,IAAD,CAApB,EAA4B,OAAOA,IAAP;;IAC5BA,IAAI,CAACY,CAAL,CAAO0C,IAAP,CAAYiL,KAAZ,CAAkBvO,IAAI,CAACY,CAAvB,EAA0BZ,IAAI,CAAC,IAAD,CAA9B,EAFqC,CAIrC;IACA;;;IACA,IAAI;MACF,OAAOA,IAAI,CAAC,IAAD,CAAX;IACD,CAFD,CAEE,OAAOiR,IAAP,EAAa,CAAE;;IAEjB,OAAOjR,IAAP;EACD,CAXD;;EAaApB,IAAI,CAACoS,cAAL,GAAsB,SAASE,aAAT,CAAwBlR,IAAxB,EAA8B0B,OAA9B,EAAuCyP,aAAvC,EAAsDC,WAAtD,EAAmE;IACvF,IAAIA,WAAJ,EAAiB,MAAM,IAAI/S,MAAJ,CAAW+S,WAAW,CAACpE,OAAZ,IAAuBoE,WAAlC,CAAN;IACjBhS,UAAU,CAACiS,cAAX,CAA0BrR,IAA1B;IACAZ,UAAU,CAACkS,iBAAX,CAA6BtR,IAA7B;IACA,IAAIwD,MAAJ,EAAYpE,UAAU,CAACmS,gBAAX,CAA4BvR,IAA5B,EAAkC0B,OAAlC,EAA2CyP,aAA3C;IACZ/R,UAAU,CAACoS,YAAX,CAAwBxR,IAAxB,EAA8B0B,OAA9B;IACAtC,UAAU,CAACqS,cAAX,CAA0BzR,IAA1B;IACAZ,UAAU,CAACsS,YAAX,CAAwB1R,IAAxB;IACAZ,UAAU,CAACuS,WAAX,CAAuB3R,IAAvB;EACD,CATD;;EAWA,SAAS2N,WAAT,GAAwB;IACtB,IAAI,CAACE,YAAL,EAAmB;;IAEnB,IAAI;MACF,MAAM;QAAElN;MAAF,IAAUhB,OAAhB;MACA,MAAM+N,MAAM,GAAG/M,GAAG,CAACiR,MAAJ,IAAcjR,GAAG,CAACkR,WAAlB,IAAiClR,GAAG,CAACmR,IAArC,IAA6CnR,GAAG,CAACoR,QAAjD,IAA6D,OAA5E;MACAnT,IAAI,CAAC8O,MAAL,CAAYA,MAAM,CAAC5M,OAAP,CAAe,QAAf,EAAyB,EAAzB,CAAZ;IACD,CAJD,CAIE,OAAOuN,GAAP,EAAY,CACZ;MACA;IACD;EACF,CAnsC8C,CAqsC/C;EACA;;;EACAzP,IAAI,CAAC4N,IAAL;EACA5N,IAAI,CAACsN,OAAL;EAEA,OAAOtN,IAAP;AACD,C,CAED;AACA;;;AACAN,OAAO,CAACgC,MAAR,GAAiBA,MAAjB;;AACA,SAASA,MAAT,CAAiB0R,IAAjB,EAAuBjL,GAAvB,EAA4B;EAC1B,OAAOlJ,IAAI,CAACoU,QAAL,CAAcD,IAAd,EAAoBjL,GAApB,CAAP;AACD"},"metadata":{},"sourceType":"script"}