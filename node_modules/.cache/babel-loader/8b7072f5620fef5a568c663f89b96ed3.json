{"ast":null,"code":"'use strict'; // this file handles outputting usage instructions,\n// failures, etc. keeps logging in one place.\n\nconst decamelize = require('decamelize');\n\nconst stringWidth = require('string-width');\n\nconst objFilter = require('./obj-filter');\n\nconst path = require('path');\n\nconst setBlocking = require('set-blocking');\n\nconst YError = require('./yerror');\n\nmodule.exports = function usage(yargs, y18n) {\n  const __ = y18n.__;\n  const self = {}; // methods for ouputting/building failure message.\n\n  const fails = [];\n\n  self.failFn = function failFn(f) {\n    fails.push(f);\n  };\n\n  let failMessage = null;\n  let showHelpOnFail = true;\n\n  self.showHelpOnFail = function showHelpOnFailFn(enabled, message) {\n    if (typeof enabled === 'string') {\n      message = enabled;\n      enabled = true;\n    } else if (typeof enabled === 'undefined') {\n      enabled = true;\n    }\n\n    failMessage = message;\n    showHelpOnFail = enabled;\n    return self;\n  };\n\n  let failureOutput = false;\n\n  self.fail = function fail(msg, err) {\n    const logger = yargs._getLoggerInstance();\n\n    if (fails.length) {\n      for (let i = fails.length - 1; i >= 0; --i) {\n        fails[i](msg, err, self);\n      }\n    } else {\n      if (yargs.getExitProcess()) setBlocking(true); // don't output failure message more than once\n\n      if (!failureOutput) {\n        failureOutput = true;\n\n        if (showHelpOnFail) {\n          yargs.showHelp('error');\n          logger.error();\n        }\n\n        if (msg || err) logger.error(msg || err);\n\n        if (failMessage) {\n          if (msg || err) logger.error('');\n          logger.error(failMessage);\n        }\n      }\n\n      err = err || new YError(msg);\n\n      if (yargs.getExitProcess()) {\n        return yargs.exit(1);\n      } else if (yargs._hasParseCallback()) {\n        return yargs.exit(1, err);\n      } else {\n        throw err;\n      }\n    }\n  }; // methods for ouputting/building help (usage) message.\n\n\n  let usages = [];\n  let usageDisabled = false;\n\n  self.usage = (msg, description) => {\n    if (msg === null) {\n      usageDisabled = true;\n      usages = [];\n      return;\n    }\n\n    usageDisabled = false;\n    usages.push([msg, description || '']);\n    return self;\n  };\n\n  self.getUsage = () => {\n    return usages;\n  };\n\n  self.getUsageDisabled = () => {\n    return usageDisabled;\n  };\n\n  self.getPositionalGroupName = () => {\n    return __('Positionals:');\n  };\n\n  let examples = [];\n\n  self.example = (cmd, description) => {\n    examples.push([cmd, description || '']);\n  };\n\n  let commands = [];\n\n  self.command = function command(cmd, description, isDefault, aliases) {\n    // the last default wins, so cancel out any previously set default\n    if (isDefault) {\n      commands = commands.map(cmdArray => {\n        cmdArray[2] = false;\n        return cmdArray;\n      });\n    }\n\n    commands.push([cmd, description || '', isDefault, aliases]);\n  };\n\n  self.getCommands = () => commands;\n\n  let descriptions = {};\n\n  self.describe = function describe(key, desc) {\n    if (typeof key === 'object') {\n      Object.keys(key).forEach(k => {\n        self.describe(k, key[k]);\n      });\n    } else {\n      descriptions[key] = desc;\n    }\n  };\n\n  self.getDescriptions = () => descriptions;\n\n  let epilogs = [];\n\n  self.epilog = msg => {\n    epilogs.push(msg);\n  };\n\n  let wrapSet = false;\n  let wrap;\n\n  self.wrap = cols => {\n    wrapSet = true;\n    wrap = cols;\n  };\n\n  function getWrap() {\n    if (!wrapSet) {\n      wrap = windowWidth();\n      wrapSet = true;\n    }\n\n    return wrap;\n  }\n\n  const deferY18nLookupPrefix = '__yargsString__:';\n\n  self.deferY18nLookup = str => deferY18nLookupPrefix + str;\n\n  const defaultGroup = 'Options:';\n\n  self.help = function help() {\n    if (cachedHelpMessage) return cachedHelpMessage;\n    normalizeAliases(); // handle old demanded API\n\n    const base$0 = yargs.customScriptName ? yargs.$0 : path.basename(yargs.$0);\n    const demandedOptions = yargs.getDemandedOptions();\n    const demandedCommands = yargs.getDemandedCommands();\n    const groups = yargs.getGroups();\n    const options = yargs.getOptions();\n    let keys = [];\n    keys = keys.concat(Object.keys(descriptions));\n    keys = keys.concat(Object.keys(demandedOptions));\n    keys = keys.concat(Object.keys(demandedCommands));\n    keys = keys.concat(Object.keys(options.default));\n    keys = keys.filter(filterHiddenOptions);\n    keys = Object.keys(keys.reduce((acc, key) => {\n      if (key !== '_') acc[key] = true;\n      return acc;\n    }, {}));\n    const theWrap = getWrap();\n\n    const ui = require('cliui')({\n      width: theWrap,\n      wrap: !!theWrap\n    }); // the usage string.\n\n\n    if (!usageDisabled) {\n      if (usages.length) {\n        // user-defined usage.\n        usages.forEach(usage => {\n          ui.div(`${usage[0].replace(/\\$0/g, base$0)}`);\n\n          if (usage[1]) {\n            ui.div({\n              text: `${usage[1]}`,\n              padding: [1, 0, 0, 0]\n            });\n          }\n        });\n        ui.div();\n      } else if (commands.length) {\n        let u = null; // demonstrate how commands are used.\n\n        if (demandedCommands._) {\n          u = `${base$0} <${__('command')}>\\n`;\n        } else {\n          u = `${base$0} [${__('command')}]\\n`;\n        }\n\n        ui.div(`${u}`);\n      }\n    } // your application's commands, i.e., non-option\n    // arguments populated in '_'.\n\n\n    if (commands.length) {\n      ui.div(__('Commands:'));\n      const context = yargs.getContext();\n      const parentCommands = context.commands.length ? `${context.commands.join(' ')} ` : '';\n\n      if (yargs.getParserConfiguration()['sort-commands'] === true) {\n        commands = commands.sort((a, b) => a[0].localeCompare(b[0]));\n      }\n\n      commands.forEach(command => {\n        const commandString = `${base$0} ${parentCommands}${command[0].replace(/^\\$0 ?/, '')}`; // drop $0 from default commands.\n\n        ui.span({\n          text: commandString,\n          padding: [0, 2, 0, 2],\n          width: maxWidth(commands, theWrap, `${base$0}${parentCommands}`) + 4\n        }, {\n          text: command[1]\n        });\n        const hints = [];\n        if (command[2]) hints.push(`[${__('default:').slice(0, -1)}]`); // TODO hacking around i18n here\n\n        if (command[3] && command[3].length) {\n          hints.push(`[${__('aliases:')} ${command[3].join(', ')}]`);\n        }\n\n        if (hints.length) {\n          ui.div({\n            text: hints.join(' '),\n            padding: [0, 0, 0, 2],\n            align: 'right'\n          });\n        } else {\n          ui.div();\n        }\n      });\n      ui.div();\n    } // perform some cleanup on the keys array, making it\n    // only include top-level keys not their aliases.\n\n\n    const aliasKeys = (Object.keys(options.alias) || []).concat(Object.keys(yargs.parsed.newAliases) || []);\n    keys = keys.filter(key => !yargs.parsed.newAliases[key] && aliasKeys.every(alias => (options.alias[alias] || []).indexOf(key) === -1)); // populate 'Options:' group with any keys that have not\n    // explicitly had a group set.\n\n    if (!groups[defaultGroup]) groups[defaultGroup] = [];\n    addUngroupedKeys(keys, options.alias, groups); // display 'Options:' table along with any custom tables:\n\n    Object.keys(groups).forEach(groupName => {\n      if (!groups[groupName].length) return; // if we've grouped the key 'f', but 'f' aliases 'foobar',\n      // normalizedKeys should contain only 'foobar'.\n\n      const normalizedKeys = groups[groupName].filter(filterHiddenOptions).map(key => {\n        if (~aliasKeys.indexOf(key)) return key;\n\n        for (let i = 0, aliasKey; (aliasKey = aliasKeys[i]) !== undefined; i++) {\n          if (~(options.alias[aliasKey] || []).indexOf(key)) return aliasKey;\n        }\n\n        return key;\n      });\n      if (normalizedKeys.length < 1) return;\n      ui.div(__(groupName)); // actually generate the switches string --foo, -f, --bar.\n\n      const switches = normalizedKeys.reduce((acc, key) => {\n        acc[key] = [key].concat(options.alias[key] || []).map(sw => {\n          // for the special positional group don't\n          // add '--' or '-' prefix.\n          if (groupName === self.getPositionalGroupName()) return sw;else return (sw.length > 1 ? '--' : '-') + sw;\n        }).join(', ');\n        return acc;\n      }, {});\n      normalizedKeys.forEach(key => {\n        const kswitch = switches[key];\n        let desc = descriptions[key] || '';\n        let type = null;\n        if (~desc.lastIndexOf(deferY18nLookupPrefix)) desc = __(desc.substring(deferY18nLookupPrefix.length));\n        if (~options.boolean.indexOf(key)) type = `[${__('boolean')}]`;\n        if (~options.count.indexOf(key)) type = `[${__('count')}]`;\n        if (~options.string.indexOf(key)) type = `[${__('string')}]`;\n        if (~options.normalize.indexOf(key)) type = `[${__('string')}]`;\n        if (~options.array.indexOf(key)) type = `[${__('array')}]`;\n        if (~options.number.indexOf(key)) type = `[${__('number')}]`;\n        const extra = [type, key in demandedOptions ? `[${__('required')}]` : null, options.choices && options.choices[key] ? `[${__('choices:')} ${self.stringifiedValues(options.choices[key])}]` : null, defaultString(options.default[key], options.defaultDescription[key])].filter(Boolean).join(' ');\n        ui.span({\n          text: kswitch,\n          padding: [0, 2, 0, 2],\n          width: maxWidth(switches, theWrap) + 4\n        }, desc);\n        if (extra) ui.div({\n          text: extra,\n          padding: [0, 0, 0, 2],\n          align: 'right'\n        });else ui.div();\n      });\n      ui.div();\n    }); // describe some common use-cases for your application.\n\n    if (examples.length) {\n      ui.div(__('Examples:'));\n      examples.forEach(example => {\n        example[0] = example[0].replace(/\\$0/g, base$0);\n      });\n      examples.forEach(example => {\n        if (example[1] === '') {\n          ui.div({\n            text: example[0],\n            padding: [0, 2, 0, 2]\n          });\n        } else {\n          ui.div({\n            text: example[0],\n            padding: [0, 2, 0, 2],\n            width: maxWidth(examples, theWrap) + 4\n          }, {\n            text: example[1]\n          });\n        }\n      });\n      ui.div();\n    } // the usage string.\n\n\n    if (epilogs.length > 0) {\n      const e = epilogs.map(epilog => epilog.replace(/\\$0/g, base$0)).join('\\n');\n      ui.div(`${e}\\n`);\n    } // Remove the trailing white spaces\n\n\n    return ui.toString().replace(/\\s*$/, '');\n  }; // return the maximum width of a string\n  // in the left-hand column of a table.\n\n\n  function maxWidth(table, theWrap, modifier) {\n    let width = 0; // table might be of the form [leftColumn],\n    // or {key: leftColumn}\n\n    if (!Array.isArray(table)) {\n      table = Object.keys(table).map(key => [table[key]]);\n    }\n\n    table.forEach(v => {\n      width = Math.max(stringWidth(modifier ? `${modifier} ${v[0]}` : v[0]), width);\n    }); // if we've enabled 'wrap' we should limit\n    // the max-width of the left-column.\n\n    if (theWrap) width = Math.min(width, parseInt(theWrap * 0.5, 10));\n    return width;\n  } // make sure any options set for aliases,\n  // are copied to the keys being aliased.\n\n\n  function normalizeAliases() {\n    // handle old demanded API\n    const demandedOptions = yargs.getDemandedOptions();\n    const options = yargs.getOptions();\n    (Object.keys(options.alias) || []).forEach(key => {\n      options.alias[key].forEach(alias => {\n        // copy descriptions.\n        if (descriptions[alias]) self.describe(key, descriptions[alias]); // copy demanded.\n\n        if (alias in demandedOptions) yargs.demandOption(key, demandedOptions[alias]); // type messages.\n\n        if (~options.boolean.indexOf(alias)) yargs.boolean(key);\n        if (~options.count.indexOf(alias)) yargs.count(key);\n        if (~options.string.indexOf(alias)) yargs.string(key);\n        if (~options.normalize.indexOf(alias)) yargs.normalize(key);\n        if (~options.array.indexOf(alias)) yargs.array(key);\n        if (~options.number.indexOf(alias)) yargs.number(key);\n      });\n    });\n  } // if yargs is executing an async handler, we take a snapshot of the\n  // help message to display on failure:\n\n\n  let cachedHelpMessage;\n\n  self.cacheHelpMessage = function () {\n    cachedHelpMessage = this.help();\n  }; // given a set of keys, place any keys that are\n  // ungrouped under the 'Options:' grouping.\n\n\n  function addUngroupedKeys(keys, aliases, groups) {\n    let groupedKeys = [];\n    let toCheck = null;\n    Object.keys(groups).forEach(group => {\n      groupedKeys = groupedKeys.concat(groups[group]);\n    });\n    keys.forEach(key => {\n      toCheck = [key].concat(aliases[key]);\n\n      if (!toCheck.some(k => groupedKeys.indexOf(k) !== -1)) {\n        groups[defaultGroup].push(key);\n      }\n    });\n    return groupedKeys;\n  }\n\n  function filterHiddenOptions(key) {\n    return yargs.getOptions().hiddenOptions.indexOf(key) < 0 || yargs.parsed.argv[yargs.getOptions().showHiddenOpt];\n  }\n\n  self.showHelp = level => {\n    const logger = yargs._getLoggerInstance();\n\n    if (!level) level = 'error';\n    const emit = typeof level === 'function' ? level : logger[level];\n    emit(self.help());\n  };\n\n  self.functionDescription = fn => {\n    const description = fn.name ? decamelize(fn.name, '-') : __('generated-value');\n    return ['(', description, ')'].join('');\n  };\n\n  self.stringifiedValues = function stringifiedValues(values, separator) {\n    let string = '';\n    const sep = separator || ', ';\n    const array = [].concat(values);\n    if (!values || !array.length) return string;\n    array.forEach(value => {\n      if (string.length) string += sep;\n      string += JSON.stringify(value);\n    });\n    return string;\n  }; // format the default-value-string displayed in\n  // the right-hand column.\n\n\n  function defaultString(value, defaultDescription) {\n    let string = `[${__('default:')} `;\n    if (value === undefined && !defaultDescription) return null;\n\n    if (defaultDescription) {\n      string += defaultDescription;\n    } else {\n      switch (typeof value) {\n        case 'string':\n          string += `\"${value}\"`;\n          break;\n\n        case 'object':\n          string += JSON.stringify(value);\n          break;\n\n        default:\n          string += value;\n      }\n    }\n\n    return `${string}]`;\n  } // guess the width of the console window, max-width 80.\n\n\n  function windowWidth() {\n    const maxWidth = 80;\n\n    if (typeof process === 'object' && process.stdout && process.stdout.columns) {\n      return Math.min(maxWidth, process.stdout.columns);\n    } else {\n      return maxWidth;\n    }\n  } // logic for displaying application version.\n\n\n  let version = null;\n\n  self.version = ver => {\n    version = ver;\n  };\n\n  self.showVersion = () => {\n    const logger = yargs._getLoggerInstance();\n\n    logger.log(version);\n  };\n\n  self.reset = function reset(localLookup) {\n    // do not reset wrap here\n    // do not reset fails here\n    failMessage = null;\n    failureOutput = false;\n    usages = [];\n    usageDisabled = false;\n    epilogs = [];\n    examples = [];\n    commands = [];\n    descriptions = objFilter(descriptions, (k, v) => !localLookup[k]);\n    return self;\n  };\n\n  let frozens = [];\n\n  self.freeze = function freeze() {\n    let frozen = {};\n    frozens.push(frozen);\n    frozen.failMessage = failMessage;\n    frozen.failureOutput = failureOutput;\n    frozen.usages = usages;\n    frozen.usageDisabled = usageDisabled;\n    frozen.epilogs = epilogs;\n    frozen.examples = examples;\n    frozen.commands = commands;\n    frozen.descriptions = descriptions;\n  };\n\n  self.unfreeze = function unfreeze() {\n    let frozen = frozens.pop();\n    failMessage = frozen.failMessage;\n    failureOutput = frozen.failureOutput;\n    usages = frozen.usages;\n    usageDisabled = frozen.usageDisabled;\n    epilogs = frozen.epilogs;\n    examples = frozen.examples;\n    commands = frozen.commands;\n    descriptions = frozen.descriptions;\n  };\n\n  return self;\n};","map":{"version":3,"names":["decamelize","require","stringWidth","objFilter","path","setBlocking","YError","module","exports","usage","yargs","y18n","__","self","fails","failFn","f","push","failMessage","showHelpOnFail","showHelpOnFailFn","enabled","message","failureOutput","fail","msg","err","logger","_getLoggerInstance","length","i","getExitProcess","showHelp","error","exit","_hasParseCallback","usages","usageDisabled","description","getUsage","getUsageDisabled","getPositionalGroupName","examples","example","cmd","commands","command","isDefault","aliases","map","cmdArray","getCommands","descriptions","describe","key","desc","Object","keys","forEach","k","getDescriptions","epilogs","epilog","wrapSet","wrap","cols","getWrap","windowWidth","deferY18nLookupPrefix","deferY18nLookup","str","defaultGroup","help","cachedHelpMessage","normalizeAliases","base$0","customScriptName","$0","basename","demandedOptions","getDemandedOptions","demandedCommands","getDemandedCommands","groups","getGroups","options","getOptions","concat","default","filter","filterHiddenOptions","reduce","acc","theWrap","ui","width","div","replace","text","padding","u","_","context","getContext","parentCommands","join","getParserConfiguration","sort","a","b","localeCompare","commandString","span","maxWidth","hints","slice","align","aliasKeys","alias","parsed","newAliases","every","indexOf","addUngroupedKeys","groupName","normalizedKeys","aliasKey","undefined","switches","sw","kswitch","type","lastIndexOf","substring","boolean","count","string","normalize","array","number","extra","choices","stringifiedValues","defaultString","defaultDescription","Boolean","e","toString","table","modifier","Array","isArray","v","Math","max","min","parseInt","demandOption","cacheHelpMessage","groupedKeys","toCheck","group","some","hiddenOptions","argv","showHiddenOpt","level","emit","functionDescription","fn","name","values","separator","sep","value","JSON","stringify","process","stdout","columns","version","ver","showVersion","log","reset","localLookup","frozens","freeze","frozen","unfreeze","pop"],"sources":["/home/lawrence/learn-react/react-notes-app/node_modules/yargs/lib/usage.js"],"sourcesContent":["'use strict'\n// this file handles outputting usage instructions,\n// failures, etc. keeps logging in one place.\nconst decamelize = require('decamelize')\nconst stringWidth = require('string-width')\nconst objFilter = require('./obj-filter')\nconst path = require('path')\nconst setBlocking = require('set-blocking')\nconst YError = require('./yerror')\n\nmodule.exports = function usage (yargs, y18n) {\n  const __ = y18n.__\n  const self = {}\n\n  // methods for ouputting/building failure message.\n  const fails = []\n  self.failFn = function failFn (f) {\n    fails.push(f)\n  }\n\n  let failMessage = null\n  let showHelpOnFail = true\n  self.showHelpOnFail = function showHelpOnFailFn (enabled, message) {\n    if (typeof enabled === 'string') {\n      message = enabled\n      enabled = true\n    } else if (typeof enabled === 'undefined') {\n      enabled = true\n    }\n    failMessage = message\n    showHelpOnFail = enabled\n    return self\n  }\n\n  let failureOutput = false\n  self.fail = function fail (msg, err) {\n    const logger = yargs._getLoggerInstance()\n\n    if (fails.length) {\n      for (let i = fails.length - 1; i >= 0; --i) {\n        fails[i](msg, err, self)\n      }\n    } else {\n      if (yargs.getExitProcess()) setBlocking(true)\n\n      // don't output failure message more than once\n      if (!failureOutput) {\n        failureOutput = true\n        if (showHelpOnFail) {\n          yargs.showHelp('error')\n          logger.error()\n        }\n        if (msg || err) logger.error(msg || err)\n        if (failMessage) {\n          if (msg || err) logger.error('')\n          logger.error(failMessage)\n        }\n      }\n\n      err = err || new YError(msg)\n      if (yargs.getExitProcess()) {\n        return yargs.exit(1)\n      } else if (yargs._hasParseCallback()) {\n        return yargs.exit(1, err)\n      } else {\n        throw err\n      }\n    }\n  }\n\n  // methods for ouputting/building help (usage) message.\n  let usages = []\n  let usageDisabled = false\n  self.usage = (msg, description) => {\n    if (msg === null) {\n      usageDisabled = true\n      usages = []\n      return\n    }\n    usageDisabled = false\n    usages.push([msg, description || ''])\n    return self\n  }\n  self.getUsage = () => {\n    return usages\n  }\n  self.getUsageDisabled = () => {\n    return usageDisabled\n  }\n\n  self.getPositionalGroupName = () => {\n    return __('Positionals:')\n  }\n\n  let examples = []\n  self.example = (cmd, description) => {\n    examples.push([cmd, description || ''])\n  }\n\n  let commands = []\n  self.command = function command (cmd, description, isDefault, aliases) {\n    // the last default wins, so cancel out any previously set default\n    if (isDefault) {\n      commands = commands.map((cmdArray) => {\n        cmdArray[2] = false\n        return cmdArray\n      })\n    }\n    commands.push([cmd, description || '', isDefault, aliases])\n  }\n  self.getCommands = () => commands\n\n  let descriptions = {}\n  self.describe = function describe (key, desc) {\n    if (typeof key === 'object') {\n      Object.keys(key).forEach((k) => {\n        self.describe(k, key[k])\n      })\n    } else {\n      descriptions[key] = desc\n    }\n  }\n  self.getDescriptions = () => descriptions\n\n  let epilogs = []\n  self.epilog = (msg) => {\n    epilogs.push(msg)\n  }\n\n  let wrapSet = false\n  let wrap\n  self.wrap = (cols) => {\n    wrapSet = true\n    wrap = cols\n  }\n\n  function getWrap () {\n    if (!wrapSet) {\n      wrap = windowWidth()\n      wrapSet = true\n    }\n\n    return wrap\n  }\n\n  const deferY18nLookupPrefix = '__yargsString__:'\n  self.deferY18nLookup = str => deferY18nLookupPrefix + str\n\n  const defaultGroup = 'Options:'\n  self.help = function help () {\n    if (cachedHelpMessage) return cachedHelpMessage\n    normalizeAliases()\n\n    // handle old demanded API\n    const base$0 = yargs.customScriptName ? yargs.$0 : path.basename(yargs.$0)\n    const demandedOptions = yargs.getDemandedOptions()\n    const demandedCommands = yargs.getDemandedCommands()\n    const groups = yargs.getGroups()\n    const options = yargs.getOptions()\n\n    let keys = []\n    keys = keys.concat(Object.keys(descriptions))\n    keys = keys.concat(Object.keys(demandedOptions))\n    keys = keys.concat(Object.keys(demandedCommands))\n    keys = keys.concat(Object.keys(options.default))\n    keys = keys.filter(filterHiddenOptions)\n    keys = Object.keys(keys.reduce((acc, key) => {\n      if (key !== '_') acc[key] = true\n      return acc\n    }, {}))\n\n    const theWrap = getWrap()\n    const ui = require('cliui')({\n      width: theWrap,\n      wrap: !!theWrap\n    })\n\n    // the usage string.\n    if (!usageDisabled) {\n      if (usages.length) {\n        // user-defined usage.\n        usages.forEach((usage) => {\n          ui.div(`${usage[0].replace(/\\$0/g, base$0)}`)\n          if (usage[1]) {\n            ui.div({ text: `${usage[1]}`, padding: [1, 0, 0, 0] })\n          }\n        })\n        ui.div()\n      } else if (commands.length) {\n        let u = null\n        // demonstrate how commands are used.\n        if (demandedCommands._) {\n          u = `${base$0} <${__('command')}>\\n`\n        } else {\n          u = `${base$0} [${__('command')}]\\n`\n        }\n        ui.div(`${u}`)\n      }\n    }\n\n    // your application's commands, i.e., non-option\n    // arguments populated in '_'.\n    if (commands.length) {\n      ui.div(__('Commands:'))\n\n      const context = yargs.getContext()\n      const parentCommands = context.commands.length ? `${context.commands.join(' ')} ` : ''\n\n      if (yargs.getParserConfiguration()['sort-commands'] === true) {\n        commands = commands.sort((a, b) => a[0].localeCompare(b[0]))\n      }\n\n      commands.forEach((command) => {\n        const commandString = `${base$0} ${parentCommands}${command[0].replace(/^\\$0 ?/, '')}` // drop $0 from default commands.\n        ui.span(\n          {\n            text: commandString,\n            padding: [0, 2, 0, 2],\n            width: maxWidth(commands, theWrap, `${base$0}${parentCommands}`) + 4\n          },\n          { text: command[1] }\n        )\n        const hints = []\n        if (command[2]) hints.push(`[${__('default:').slice(0, -1)}]`) // TODO hacking around i18n here\n        if (command[3] && command[3].length) {\n          hints.push(`[${__('aliases:')} ${command[3].join(', ')}]`)\n        }\n        if (hints.length) {\n          ui.div({ text: hints.join(' '), padding: [0, 0, 0, 2], align: 'right' })\n        } else {\n          ui.div()\n        }\n      })\n\n      ui.div()\n    }\n\n    // perform some cleanup on the keys array, making it\n    // only include top-level keys not their aliases.\n    const aliasKeys = (Object.keys(options.alias) || [])\n      .concat(Object.keys(yargs.parsed.newAliases) || [])\n\n    keys = keys.filter(key => !yargs.parsed.newAliases[key] && aliasKeys.every(alias => (options.alias[alias] || []).indexOf(key) === -1))\n\n    // populate 'Options:' group with any keys that have not\n    // explicitly had a group set.\n    if (!groups[defaultGroup]) groups[defaultGroup] = []\n    addUngroupedKeys(keys, options.alias, groups)\n\n    // display 'Options:' table along with any custom tables:\n    Object.keys(groups).forEach((groupName) => {\n      if (!groups[groupName].length) return\n\n      // if we've grouped the key 'f', but 'f' aliases 'foobar',\n      // normalizedKeys should contain only 'foobar'.\n      const normalizedKeys = groups[groupName].filter(filterHiddenOptions).map((key) => {\n        if (~aliasKeys.indexOf(key)) return key\n        for (let i = 0, aliasKey; (aliasKey = aliasKeys[i]) !== undefined; i++) {\n          if (~(options.alias[aliasKey] || []).indexOf(key)) return aliasKey\n        }\n        return key\n      })\n\n      if (normalizedKeys.length < 1) return\n\n      ui.div(__(groupName))\n\n      // actually generate the switches string --foo, -f, --bar.\n      const switches = normalizedKeys.reduce((acc, key) => {\n        acc[key] = [ key ].concat(options.alias[key] || [])\n          .map(sw => {\n            // for the special positional group don't\n            // add '--' or '-' prefix.\n            if (groupName === self.getPositionalGroupName()) return sw\n            else return (sw.length > 1 ? '--' : '-') + sw\n          })\n          .join(', ')\n\n        return acc\n      }, {})\n\n      normalizedKeys.forEach((key) => {\n        const kswitch = switches[key]\n        let desc = descriptions[key] || ''\n        let type = null\n\n        if (~desc.lastIndexOf(deferY18nLookupPrefix)) desc = __(desc.substring(deferY18nLookupPrefix.length))\n\n        if (~options.boolean.indexOf(key)) type = `[${__('boolean')}]`\n        if (~options.count.indexOf(key)) type = `[${__('count')}]`\n        if (~options.string.indexOf(key)) type = `[${__('string')}]`\n        if (~options.normalize.indexOf(key)) type = `[${__('string')}]`\n        if (~options.array.indexOf(key)) type = `[${__('array')}]`\n        if (~options.number.indexOf(key)) type = `[${__('number')}]`\n\n        const extra = [\n          type,\n          (key in demandedOptions) ? `[${__('required')}]` : null,\n          options.choices && options.choices[key] ? `[${__('choices:')} ${\n            self.stringifiedValues(options.choices[key])}]` : null,\n          defaultString(options.default[key], options.defaultDescription[key])\n        ].filter(Boolean).join(' ')\n\n        ui.span(\n          { text: kswitch, padding: [0, 2, 0, 2], width: maxWidth(switches, theWrap) + 4 },\n          desc\n        )\n\n        if (extra) ui.div({ text: extra, padding: [0, 0, 0, 2], align: 'right' })\n        else ui.div()\n      })\n\n      ui.div()\n    })\n\n    // describe some common use-cases for your application.\n    if (examples.length) {\n      ui.div(__('Examples:'))\n\n      examples.forEach((example) => {\n        example[0] = example[0].replace(/\\$0/g, base$0)\n      })\n\n      examples.forEach((example) => {\n        if (example[1] === '') {\n          ui.div(\n            {\n              text: example[0],\n              padding: [0, 2, 0, 2]\n            }\n          )\n        } else {\n          ui.div(\n            {\n              text: example[0],\n              padding: [0, 2, 0, 2],\n              width: maxWidth(examples, theWrap) + 4\n            }, {\n              text: example[1]\n            }\n          )\n        }\n      })\n\n      ui.div()\n    }\n\n    // the usage string.\n    if (epilogs.length > 0) {\n      const e = epilogs.map(epilog => epilog.replace(/\\$0/g, base$0)).join('\\n')\n      ui.div(`${e}\\n`)\n    }\n\n    // Remove the trailing white spaces\n    return ui.toString().replace(/\\s*$/, '')\n  }\n\n  // return the maximum width of a string\n  // in the left-hand column of a table.\n  function maxWidth (table, theWrap, modifier) {\n    let width = 0\n\n    // table might be of the form [leftColumn],\n    // or {key: leftColumn}\n    if (!Array.isArray(table)) {\n      table = Object.keys(table).map(key => [table[key]])\n    }\n\n    table.forEach((v) => {\n      width = Math.max(\n        stringWidth(modifier ? `${modifier} ${v[0]}` : v[0]),\n        width\n      )\n    })\n\n    // if we've enabled 'wrap' we should limit\n    // the max-width of the left-column.\n    if (theWrap) width = Math.min(width, parseInt(theWrap * 0.5, 10))\n\n    return width\n  }\n\n  // make sure any options set for aliases,\n  // are copied to the keys being aliased.\n  function normalizeAliases () {\n    // handle old demanded API\n    const demandedOptions = yargs.getDemandedOptions()\n    const options = yargs.getOptions()\n\n    ;(Object.keys(options.alias) || []).forEach((key) => {\n      options.alias[key].forEach((alias) => {\n        // copy descriptions.\n        if (descriptions[alias]) self.describe(key, descriptions[alias])\n        // copy demanded.\n        if (alias in demandedOptions) yargs.demandOption(key, demandedOptions[alias])\n        // type messages.\n        if (~options.boolean.indexOf(alias)) yargs.boolean(key)\n        if (~options.count.indexOf(alias)) yargs.count(key)\n        if (~options.string.indexOf(alias)) yargs.string(key)\n        if (~options.normalize.indexOf(alias)) yargs.normalize(key)\n        if (~options.array.indexOf(alias)) yargs.array(key)\n        if (~options.number.indexOf(alias)) yargs.number(key)\n      })\n    })\n  }\n\n  // if yargs is executing an async handler, we take a snapshot of the\n  // help message to display on failure:\n  let cachedHelpMessage\n  self.cacheHelpMessage = function () {\n    cachedHelpMessage = this.help()\n  }\n\n  // given a set of keys, place any keys that are\n  // ungrouped under the 'Options:' grouping.\n  function addUngroupedKeys (keys, aliases, groups) {\n    let groupedKeys = []\n    let toCheck = null\n    Object.keys(groups).forEach((group) => {\n      groupedKeys = groupedKeys.concat(groups[group])\n    })\n\n    keys.forEach((key) => {\n      toCheck = [key].concat(aliases[key])\n      if (!toCheck.some(k => groupedKeys.indexOf(k) !== -1)) {\n        groups[defaultGroup].push(key)\n      }\n    })\n    return groupedKeys\n  }\n\n  function filterHiddenOptions (key) {\n    return yargs.getOptions().hiddenOptions.indexOf(key) < 0 || yargs.parsed.argv[yargs.getOptions().showHiddenOpt]\n  }\n\n  self.showHelp = (level) => {\n    const logger = yargs._getLoggerInstance()\n    if (!level) level = 'error'\n    const emit = typeof level === 'function' ? level : logger[level]\n    emit(self.help())\n  }\n\n  self.functionDescription = (fn) => {\n    const description = fn.name ? decamelize(fn.name, '-') : __('generated-value')\n    return ['(', description, ')'].join('')\n  }\n\n  self.stringifiedValues = function stringifiedValues (values, separator) {\n    let string = ''\n    const sep = separator || ', '\n    const array = [].concat(values)\n\n    if (!values || !array.length) return string\n\n    array.forEach((value) => {\n      if (string.length) string += sep\n      string += JSON.stringify(value)\n    })\n\n    return string\n  }\n\n  // format the default-value-string displayed in\n  // the right-hand column.\n  function defaultString (value, defaultDescription) {\n    let string = `[${__('default:')} `\n\n    if (value === undefined && !defaultDescription) return null\n\n    if (defaultDescription) {\n      string += defaultDescription\n    } else {\n      switch (typeof value) {\n        case 'string':\n          string += `\"${value}\"`\n          break\n        case 'object':\n          string += JSON.stringify(value)\n          break\n        default:\n          string += value\n      }\n    }\n\n    return `${string}]`\n  }\n\n  // guess the width of the console window, max-width 80.\n  function windowWidth () {\n    const maxWidth = 80\n    if (typeof process === 'object' && process.stdout && process.stdout.columns) {\n      return Math.min(maxWidth, process.stdout.columns)\n    } else {\n      return maxWidth\n    }\n  }\n\n  // logic for displaying application version.\n  let version = null\n  self.version = (ver) => {\n    version = ver\n  }\n\n  self.showVersion = () => {\n    const logger = yargs._getLoggerInstance()\n    logger.log(version)\n  }\n\n  self.reset = function reset (localLookup) {\n    // do not reset wrap here\n    // do not reset fails here\n    failMessage = null\n    failureOutput = false\n    usages = []\n    usageDisabled = false\n    epilogs = []\n    examples = []\n    commands = []\n    descriptions = objFilter(descriptions, (k, v) => !localLookup[k])\n    return self\n  }\n\n  let frozens = []\n  self.freeze = function freeze () {\n    let frozen = {}\n    frozens.push(frozen)\n    frozen.failMessage = failMessage\n    frozen.failureOutput = failureOutput\n    frozen.usages = usages\n    frozen.usageDisabled = usageDisabled\n    frozen.epilogs = epilogs\n    frozen.examples = examples\n    frozen.commands = commands\n    frozen.descriptions = descriptions\n  }\n  self.unfreeze = function unfreeze () {\n    let frozen = frozens.pop()\n    failMessage = frozen.failMessage\n    failureOutput = frozen.failureOutput\n    usages = frozen.usages\n    usageDisabled = frozen.usageDisabled\n    epilogs = frozen.epilogs\n    examples = frozen.examples\n    commands = frozen.commands\n    descriptions = frozen.descriptions\n  }\n\n  return self\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}